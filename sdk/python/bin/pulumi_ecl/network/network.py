# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Network(pulumi.CustomResource):
    admin_state_up: pulumi.Output[bool]
    """
    The administrative state of the network.
    Acceptable values are "true" and "false".
    Changing this value updates the state of the existing network.
    """
    description: pulumi.Output[str]
    """
    Network description.
    """
    name: pulumi.Output[str]
    """
    The name of the network. Changing this updates the name of
    the existing network.
    """
    plane: pulumi.Output[str]
    """
    The plane of the network. 
    Allowed values are "data" and "storage".
    Changing this creates a new network.
    """
    region: pulumi.Output[str]
    """
    The region in which to obtain the V2 Networking client.
    A Networking client is needed to create a Neutron network. If omitted, the
    `region` argument of the provider is used. Changing this creates a new
    network.
    """
    shared: pulumi.Output[bool]
    """
    See Argument Reference above.
    """
    status: pulumi.Output[str]
    """
    The network status.
    """
    subnets: pulumi.Output[list]
    """
    The associated subnets.
    """
    tags: pulumi.Output[dict]
    """
    Network tags.
    """
    tenant_id: pulumi.Output[str]
    """
    The owner of the network. Required if admin wants to
    create a network for another tenant. Changing this creates a new network.
    """
    def __init__(__self__, resource_name, opts=None, admin_state_up=None, description=None, name=None, plane=None, region=None, tags=None, tenant_id=None, __name__=None, __opts__=None):
        """
        Manages a V2 network resource within Enterprise Cloud.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_state_up: The administrative state of the network.
               Acceptable values are "true" and "false".
               Changing this value updates the state of the existing network.
        :param pulumi.Input[str] description: Network description.
        :param pulumi.Input[str] name: The name of the network. Changing this updates the name of
               the existing network.
        :param pulumi.Input[str] plane: The plane of the network. 
               Allowed values are "data" and "storage".
               Changing this creates a new network.
        :param pulumi.Input[str] region: The region in which to obtain the V2 Networking client.
               A Networking client is needed to create a Neutron network. If omitted, the
               `region` argument of the provider is used. Changing this creates a new
               network.
        :param pulumi.Input[dict] tags: Network tags.
        :param pulumi.Input[str] tenant_id: The owner of the network. Required if admin wants to
               create a network for another tenant. Changing this creates a new network.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['admin_state_up'] = admin_state_up

        __props__['description'] = description

        __props__['name'] = name

        __props__['plane'] = plane

        __props__['region'] = region

        __props__['tags'] = tags

        __props__['tenant_id'] = tenant_id

        __props__['shared'] = None
        __props__['status'] = None
        __props__['subnets'] = None

        super(Network, __self__).__init__(
            'ecl:network/network:Network',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

