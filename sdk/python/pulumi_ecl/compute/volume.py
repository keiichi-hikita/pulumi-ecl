# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Volume(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, availability_zone=None, description=None, image_id=None, metadata=None, name=None, region=None, size=None, source_replica=None, volume_type=None):
        """Create a Volume resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if availability_zone and not isinstance(availability_zone, basestring):
            raise TypeError('Expected property availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        __props__['availabilityZone'] = availability_zone

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if image_id and not isinstance(image_id, basestring):
            raise TypeError('Expected property image_id to be a basestring')
        __self__.image_id = image_id
        __props__['imageId'] = image_id

        if metadata and not isinstance(metadata, dict):
            raise TypeError('Expected property metadata to be a dict')
        __self__.metadata = metadata
        __props__['metadata'] = metadata

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if not size:
            raise TypeError('Missing required property size')
        elif not isinstance(size, int):
            raise TypeError('Expected property size to be a int')
        __self__.size = size
        __props__['size'] = size

        if source_replica and not isinstance(source_replica, basestring):
            raise TypeError('Expected property source_replica to be a basestring')
        __self__.source_replica = source_replica
        __props__['sourceReplica'] = source_replica

        if volume_type and not isinstance(volume_type, basestring):
            raise TypeError('Expected property volume_type to be a basestring')
        __self__.volume_type = volume_type
        __props__['volumeType'] = volume_type

        __self__.attachments = pulumi.runtime.UNKNOWN

        super(Volume, __self__).__init__(
            'ecl:compute/volume:Volume',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'attachments' in outs:
            self.attachments = outs['attachments']
        if 'availabilityZone' in outs:
            self.availability_zone = outs['availabilityZone']
        if 'description' in outs:
            self.description = outs['description']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'metadata' in outs:
            self.metadata = outs['metadata']
        if 'name' in outs:
            self.name = outs['name']
        if 'region' in outs:
            self.region = outs['region']
        if 'size' in outs:
            self.size = outs['size']
        if 'sourceReplica' in outs:
            self.source_replica = outs['sourceReplica']
        if 'volumeType' in outs:
            self.volume_type = outs['volumeType']
