# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Tenant(pulumi.CustomResource):
    contract_id: pulumi.Output[str]
    description: pulumi.Output[str]
    start_time: pulumi.Output[str]
    tenant_id: pulumi.Output[str]
    tenant_name: pulumi.Output[str]
    tenant_region: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, contract_id=None, description=None, tenant_name=None, tenant_region=None, __name__=None, __opts__=None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] contract_id
        :param pulumi.Input[str] description
        :param pulumi.Input[str] tenant_name
        :param pulumi.Input[str] tenant_region
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['contract_id'] = contract_id

        if description is None:
            raise TypeError('Missing required property description')
        __props__['description'] = description

        if tenant_name is None:
            raise TypeError('Missing required property tenant_name')
        __props__['tenant_name'] = tenant_name

        if tenant_region is None:
            raise TypeError('Missing required property tenant_region')
        __props__['tenant_region'] = tenant_region

        __props__['start_time'] = None
        __props__['tenant_id'] = None

        super(Tenant, __self__).__init__(
            'ecl:sss/tenant:Tenant',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

