# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class User(pulumi.CustomResource):
    brand_id: pulumi.Output[str]
    """
    Brand ID which this user belongs. (ex. ecl2)
    """
    contract_id: pulumi.Output[str]
    """
    Contract ID which this user belongs.
    Contract id format is econ[0-9]{10}
    """
    contract_owner: pulumi.Output[bool]
    """
    If this user is the Super user in this contract, true. If not, false
    """
    external_reference_id: pulumi.Output[str]
    """
    External system oriented contract id.
    If this user's contract is NTT Communications, customer number with 15 numbers will be shown
    """
    keystone_endpoint: pulumi.Output[str]
    """
    Keystone address this user can use to get token for SSS API request
    """
    keystone_name: pulumi.Output[str]
    """
    This user’s API key for keystone authentication
    """
    keystone_password: pulumi.Output[str]
    """
    This user’s API secret for keystone authentication
    """
    login_id: pulumi.Output[str]
    """
    Login id of new user.
    """
    login_integration: pulumi.Output[str]
    """
    If this user's contract is tied with
    NTT Communications business portal, 'icp' is shown
    """
    mail_address: pulumi.Output[str]
    """
    Mail address of new user.
    """
    notify_password: pulumi.Output[str]
    """
    If this flag is set 'true', 
    notification email will be sent to new user's email address.
    Even this parameter is optional, you must specify this in case "Creation".
    """
    password: pulumi.Output[str]
    """
    Initial password of new user.
    If this parameter is not designated,
    random initial password is generated and applied to new user.
    """
    sss_endpoint: pulumi.Output[str]
    """
    SSS endpoint recommended for this user
    """
    start_time: pulumi.Output[str]
    """
    Created time of user.
    """
    user_id: pulumi.Output[str]
    """
    login id of the user.
    When this contract is tied with icp, this parameter is fixed {email}_{user_id}
    """
    def __init__(__self__, resource_name, opts=None, login_id=None, mail_address=None, notify_password=None, password=None, __name__=None, __opts__=None):
        """
        Manages a V1 user resource within Enterprise Cloud.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] login_id: Login id of new user.
        :param pulumi.Input[str] mail_address: Mail address of new user.
        :param pulumi.Input[str] notify_password: If this flag is set 'true', 
               notification email will be sent to new user's email address.
               Even this parameter is optional, you must specify this in case "Creation".
        :param pulumi.Input[str] password: Initial password of new user.
               If this parameter is not designated,
               random initial password is generated and applied to new user.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if login_id is None:
            raise TypeError("Missing required property 'login_id'")
        __props__['login_id'] = login_id

        if mail_address is None:
            raise TypeError("Missing required property 'mail_address'")
        __props__['mail_address'] = mail_address

        __props__['notify_password'] = notify_password

        __props__['password'] = password

        __props__['brand_id'] = None
        __props__['contract_id'] = None
        __props__['contract_owner'] = None
        __props__['external_reference_id'] = None
        __props__['keystone_endpoint'] = None
        __props__['keystone_name'] = None
        __props__['keystone_password'] = None
        __props__['login_integration'] = None
        __props__['sss_endpoint'] = None
        __props__['start_time'] = None
        __props__['user_id'] = None

        super(User, __self__).__init__(
            'ecl:sss/user:User',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

