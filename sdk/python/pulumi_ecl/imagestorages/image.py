# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Image(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, container_format=None, disk_format=None, license_switch=None, local_file_path=None, min_disk_gb=None, min_ram_mb=None, name=None, properties=None, protected=None, region=None, tags=None, verify_checksum=None, visibility=None):
        """Create a Image resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not container_format:
            raise TypeError('Missing required property container_format')
        elif not isinstance(container_format, basestring):
            raise TypeError('Expected property container_format to be a basestring')
        __self__.container_format = container_format
        __props__['containerFormat'] = container_format

        if not disk_format:
            raise TypeError('Missing required property disk_format')
        elif not isinstance(disk_format, basestring):
            raise TypeError('Expected property disk_format to be a basestring')
        __self__.disk_format = disk_format
        __props__['diskFormat'] = disk_format

        if license_switch and not isinstance(license_switch, basestring):
            raise TypeError('Expected property license_switch to be a basestring')
        __self__.license_switch = license_switch
        __props__['licenseSwitch'] = license_switch

        if not local_file_path:
            raise TypeError('Missing required property local_file_path')
        elif not isinstance(local_file_path, basestring):
            raise TypeError('Expected property local_file_path to be a basestring')
        __self__.local_file_path = local_file_path
        __props__['localFilePath'] = local_file_path

        if min_disk_gb and not isinstance(min_disk_gb, int):
            raise TypeError('Expected property min_disk_gb to be a int')
        __self__.min_disk_gb = min_disk_gb
        __props__['minDiskGb'] = min_disk_gb

        if min_ram_mb and not isinstance(min_ram_mb, int):
            raise TypeError('Expected property min_ram_mb to be a int')
        __self__.min_ram_mb = min_ram_mb
        __props__['minRamMb'] = min_ram_mb

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if properties and not isinstance(properties, dict):
            raise TypeError('Expected property properties to be a dict')
        __self__.properties = properties
        __props__['properties'] = properties

        if protected and not isinstance(protected, bool):
            raise TypeError('Expected property protected to be a bool')
        __self__.protected = protected
        __props__['protected'] = protected

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if tags and not isinstance(tags, list):
            raise TypeError('Expected property tags to be a list')
        __self__.tags = tags
        __props__['tags'] = tags

        if verify_checksum and not isinstance(verify_checksum, bool):
            raise TypeError('Expected property verify_checksum to be a bool')
        __self__.verify_checksum = verify_checksum
        __props__['verifyChecksum'] = verify_checksum

        if visibility and not isinstance(visibility, basestring):
            raise TypeError('Expected property visibility to be a basestring')
        __self__.visibility = visibility
        __props__['visibility'] = visibility

        __self__.checksum = pulumi.runtime.UNKNOWN
        __self__.created_at = pulumi.runtime.UNKNOWN
        __self__.file = pulumi.runtime.UNKNOWN
        __self__.metadata = pulumi.runtime.UNKNOWN
        __self__.owner = pulumi.runtime.UNKNOWN
        __self__.schema = pulumi.runtime.UNKNOWN
        __self__.size_bytes = pulumi.runtime.UNKNOWN
        __self__.status = pulumi.runtime.UNKNOWN
        __self__.update_at = pulumi.runtime.UNKNOWN

        super(Image, __self__).__init__(
            'ecl:imagestorages/image:Image',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'checksum' in outs:
            self.checksum = outs['checksum']
        if 'containerFormat' in outs:
            self.container_format = outs['containerFormat']
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'diskFormat' in outs:
            self.disk_format = outs['diskFormat']
        if 'file' in outs:
            self.file = outs['file']
        if 'licenseSwitch' in outs:
            self.license_switch = outs['licenseSwitch']
        if 'localFilePath' in outs:
            self.local_file_path = outs['localFilePath']
        if 'metadata' in outs:
            self.metadata = outs['metadata']
        if 'minDiskGb' in outs:
            self.min_disk_gb = outs['minDiskGb']
        if 'minRamMb' in outs:
            self.min_ram_mb = outs['minRamMb']
        if 'name' in outs:
            self.name = outs['name']
        if 'owner' in outs:
            self.owner = outs['owner']
        if 'properties' in outs:
            self.properties = outs['properties']
        if 'protected' in outs:
            self.protected = outs['protected']
        if 'region' in outs:
            self.region = outs['region']
        if 'schema' in outs:
            self.schema = outs['schema']
        if 'sizeBytes' in outs:
            self.size_bytes = outs['sizeBytes']
        if 'status' in outs:
            self.status = outs['status']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'updateAt' in outs:
            self.update_at = outs['updateAt']
        if 'verifyChecksum' in outs:
            self.verify_checksum = outs['verifyChecksum']
        if 'visibility' in outs:
            self.visibility = outs['visibility']
