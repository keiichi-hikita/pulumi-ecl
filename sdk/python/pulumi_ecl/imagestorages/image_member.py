# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class ImageMember(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, image_id=None, member_id=None, region=None):
        """Create a ImageMember resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not image_id:
            raise TypeError('Missing required property image_id')
        elif not isinstance(image_id, basestring):
            raise TypeError('Expected property image_id to be a basestring')
        __self__.image_id = image_id
        __props__['imageId'] = image_id

        if not member_id:
            raise TypeError('Missing required property member_id')
        elif not isinstance(member_id, basestring):
            raise TypeError('Expected property member_id to be a basestring')
        __self__.member_id = member_id
        __props__['memberId'] = member_id

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        __self__.created_at = pulumi.runtime.UNKNOWN
        __self__.schema = pulumi.runtime.UNKNOWN
        __self__.status = pulumi.runtime.UNKNOWN
        __self__.updated_at = pulumi.runtime.UNKNOWN

        super(ImageMember, __self__).__init__(
            'ecl:imagestorages/imageMember:ImageMember',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'createdAt' in outs:
            self.created_at = outs['createdAt']
        if 'imageId' in outs:
            self.image_id = outs['imageId']
        if 'memberId' in outs:
            self.member_id = outs['memberId']
        if 'region' in outs:
            self.region = outs['region']
        if 'schema' in outs:
            self.schema = outs['schema']
        if 'status' in outs:
            self.status = outs['status']
        if 'updatedAt' in outs:
            self.updated_at = outs['updatedAt']
