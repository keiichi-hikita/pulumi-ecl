# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class InternetGateway(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, description=None, internet_service_id=None, name=None, qos_option_id=None, region=None, tenant_id=None):
        """Create a InternetGateway resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if not internet_service_id:
            raise TypeError('Missing required property internet_service_id')
        elif not isinstance(internet_service_id, basestring):
            raise TypeError('Expected property internet_service_id to be a basestring')
        __self__.internet_service_id = internet_service_id
        __props__['internetServiceId'] = internet_service_id

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not qos_option_id:
            raise TypeError('Missing required property qos_option_id')
        elif not isinstance(qos_option_id, basestring):
            raise TypeError('Expected property qos_option_id to be a basestring')
        __self__.qos_option_id = qos_option_id
        __props__['qosOptionId'] = qos_option_id

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected property tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        __props__['tenantId'] = tenant_id

        super(InternetGateway, __self__).__init__(
            'ecl:network/internetGateway:InternetGateway',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'internetServiceId' in outs:
            self.internet_service_id = outs['internetServiceId']
        if 'name' in outs:
            self.name = outs['name']
        if 'qosOptionId' in outs:
            self.qos_option_id = outs['qosOptionId']
        if 'region' in outs:
            self.region = outs['region']
        if 'tenantId' in outs:
            self.tenant_id = outs['tenantId']
