# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Subnet(pulumi.CustomResource):
    allocation_pools: pulumi.Output[list]
    """
    An array of sub-ranges of CIDR available for
    dynamic allocation to ports. The allocation_pool object structure is
    documented below. Changing this creates a new subnet.
    """
    cidr: pulumi.Output[str]
    """
    CIDR representing IP range for this subnet, based on IP
    version. You can omit this option if you are creating a subnet from a
    subnet pool.
    """
    description: pulumi.Output[str]
    """
    Subnet description.
    """
    dns_nameservers: pulumi.Output[list]
    """
    List of subnet dns name servers.
    """
    enable_dhcp: pulumi.Output[bool]
    """
    The administrative state of the network.
    Acceptable values are "true" and "false". Changing this value enables or
    disables the DHCP capabilities of the existing subnet. Defaults to true.
    """
    gateway_ip: pulumi.Output[str]
    """
    Default gateway used by devices in this subnet.
    Leaving this blank and not setting `no_gateway` will cause a default
    gateway of `.1` to be used. Changing this updates the gateway IP of the
    existing subnet.
    """
    host_routes: pulumi.Output[list]
    """
    An array of routes that should be used by devices
    with IPs from this subnet (not including local subnet route). The host_route
    object structure is documented below. Changing this updates the host routes
    for the existing subnet.
    """
    ip_version: pulumi.Output[float]
    """
    IP version.
    In Enterprise Cloud service this parameter is fixed as 4.
    """
    ipv6_address_mode: pulumi.Output[str]
    """
    Address mode for IPv6 (not supported).
    """
    ipv6_ra_mode: pulumi.Output[str]
    """
    IPv6 router advertisement mode (not supported).
    """
    name: pulumi.Output[str]
    """
    The name of the subnet. Changing this updates the name of
    the existing subnet.
    """
    network_id: pulumi.Output[str]
    """
    The UUID of the parent network. Changing this
    creates a new subnet.
    """
    no_gateway: pulumi.Output[bool]
    """
    Do not set a gateway IP on this subnet. Changing
    this removes or adds a default gateway IP of the existing subnet.
    """
    ntp_servers: pulumi.Output[list]
    """
    List of ntp servers.
    """
    region: pulumi.Output[str]
    """
    The region in which to obtain the V2 Networking client.
    A Networking client is needed to create a Neutron subnet. If omitted, the
    `region` argument of the provider is used. Changing this creates a new
    subnet.
    """
    status: pulumi.Output[str]
    """
    Hidden Subnet status.
    """
    tags: pulumi.Output[dict]
    """
    Subnet tags.
    """
    tenant_id: pulumi.Output[str]
    """
    The owner of the subnet. Required if admin wants to
    create a subnet for another tenant. Changing this creates a new subnet.
    """
    def __init__(__self__, resource_name, opts=None, allocation_pools=None, cidr=None, description=None, dns_nameservers=None, enable_dhcp=None, gateway_ip=None, host_routes=None, ip_version=None, name=None, network_id=None, no_gateway=None, ntp_servers=None, region=None, tags=None, tenant_id=None, __name__=None, __opts__=None):
        """
        Manages a V2 Neutron subnet resource within Enterprise Cloud.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allocation_pools: An array of sub-ranges of CIDR available for
               dynamic allocation to ports. The allocation_pool object structure is
               documented below. Changing this creates a new subnet.
        :param pulumi.Input[str] cidr: CIDR representing IP range for this subnet, based on IP
               version. You can omit this option if you are creating a subnet from a
               subnet pool.
        :param pulumi.Input[str] description: Subnet description.
        :param pulumi.Input[list] dns_nameservers: List of subnet dns name servers.
        :param pulumi.Input[bool] enable_dhcp: The administrative state of the network.
               Acceptable values are "true" and "false". Changing this value enables or
               disables the DHCP capabilities of the existing subnet. Defaults to true.
        :param pulumi.Input[str] gateway_ip: Default gateway used by devices in this subnet.
               Leaving this blank and not setting `no_gateway` will cause a default
               gateway of `.1` to be used. Changing this updates the gateway IP of the
               existing subnet.
        :param pulumi.Input[list] host_routes: An array of routes that should be used by devices
               with IPs from this subnet (not including local subnet route). The host_route
               object structure is documented below. Changing this updates the host routes
               for the existing subnet.
        :param pulumi.Input[float] ip_version: IP version.
               In Enterprise Cloud service this parameter is fixed as 4.
        :param pulumi.Input[str] name: The name of the subnet. Changing this updates the name of
               the existing subnet.
        :param pulumi.Input[str] network_id: The UUID of the parent network. Changing this
               creates a new subnet.
        :param pulumi.Input[bool] no_gateway: Do not set a gateway IP on this subnet. Changing
               this removes or adds a default gateway IP of the existing subnet.
        :param pulumi.Input[list] ntp_servers: List of ntp servers.
        :param pulumi.Input[str] region: The region in which to obtain the V2 Networking client.
               A Networking client is needed to create a Neutron subnet. If omitted, the
               `region` argument of the provider is used. Changing this creates a new
               subnet.
        :param pulumi.Input[dict] tags: Subnet tags.
        :param pulumi.Input[str] tenant_id: The owner of the subnet. Required if admin wants to
               create a subnet for another tenant. Changing this creates a new subnet.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allocation_pools'] = allocation_pools

        if cidr is None:
            raise TypeError("Missing required property 'cidr'")
        __props__['cidr'] = cidr

        __props__['description'] = description

        __props__['dns_nameservers'] = dns_nameservers

        __props__['enable_dhcp'] = enable_dhcp

        __props__['gateway_ip'] = gateway_ip

        __props__['host_routes'] = host_routes

        __props__['ip_version'] = ip_version

        __props__['name'] = name

        if network_id is None:
            raise TypeError("Missing required property 'network_id'")
        __props__['network_id'] = network_id

        __props__['no_gateway'] = no_gateway

        __props__['ntp_servers'] = ntp_servers

        __props__['region'] = region

        __props__['tags'] = tags

        __props__['tenant_id'] = tenant_id

        __props__['ipv6_address_mode'] = None
        __props__['ipv6_ra_mode'] = None
        __props__['status'] = None

        super(Subnet, __self__).__init__(
            'ecl:network/subnet:Subnet',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

