# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Subnet(pulumi.CustomResource):
    allocation_pools: pulumi.Output[list]
    cidr: pulumi.Output[str]
    description: pulumi.Output[str]
    dns_nameservers: pulumi.Output[list]
    enable_dhcp: pulumi.Output[bool]
    gateway_ip: pulumi.Output[str]
    host_routes: pulumi.Output[list]
    ip_version: pulumi.Output[int]
    ipv6_address_mode: pulumi.Output[str]
    ipv6_ra_mode: pulumi.Output[str]
    name: pulumi.Output[str]
    network_id: pulumi.Output[str]
    no_gateway: pulumi.Output[bool]
    ntp_servers: pulumi.Output[list]
    status: pulumi.Output[str]
    tags: pulumi.Output[dict]
    tenant_id: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, allocation_pools=None, cidr=None, description=None, dns_nameservers=None, enable_dhcp=None, gateway_ip=None, host_routes=None, ip_version=None, ipv6_address_mode=None, ipv6_ra_mode=None, name=None, network_id=None, no_gateway=None, ntp_servers=None, status=None, tags=None, tenant_id=None, __name__=None, __opts__=None):
        """
        Create a Subnet resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allocation_pools
        :param pulumi.Input[str] cidr
        :param pulumi.Input[str] description
        :param pulumi.Input[list] dns_nameservers
        :param pulumi.Input[bool] enable_dhcp
        :param pulumi.Input[str] gateway_ip
        :param pulumi.Input[list] host_routes
        :param pulumi.Input[int] ip_version
        :param pulumi.Input[str] ipv6_address_mode
        :param pulumi.Input[str] ipv6_ra_mode
        :param pulumi.Input[str] name
        :param pulumi.Input[str] network_id
        :param pulumi.Input[bool] no_gateway
        :param pulumi.Input[list] ntp_servers
        :param pulumi.Input[str] status
        :param pulumi.Input[dict] tags
        :param pulumi.Input[str] tenant_id
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allocation_pools'] = allocation_pools

        if cidr is None:
            raise TypeError('Missing required property cidr')
        __props__['cidr'] = cidr

        __props__['description'] = description

        __props__['dns_nameservers'] = dns_nameservers

        __props__['enable_dhcp'] = enable_dhcp

        __props__['gateway_ip'] = gateway_ip

        __props__['host_routes'] = host_routes

        __props__['ip_version'] = ip_version

        __props__['ipv6_address_mode'] = ipv6_address_mode

        __props__['ipv6_ra_mode'] = ipv6_ra_mode

        __props__['name'] = name

        if network_id is None:
            raise TypeError('Missing required property network_id')
        __props__['network_id'] = network_id

        __props__['no_gateway'] = no_gateway

        __props__['ntp_servers'] = ntp_servers

        __props__['status'] = status

        __props__['tags'] = tags

        __props__['tenant_id'] = tenant_id

        super(Subnet, __self__).__init__(
            'ecl:network/subnet:Subnet',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

