# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Subnet(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, allocation_pools=None, cidr=None, description=None, dns_nameservers=None, enable_dhcp=None, gateway_ip=None, host_routes=None, ip_version=None, ipv6_address_mode=None, ipv6_ra_mode=None, name=None, network_id=None, no_gateway=None, ntp_servers=None, status=None, tags=None, tenant_id=None):
        """Create a Subnet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allocation_pools and not isinstance(allocation_pools, list):
            raise TypeError('Expected property allocation_pools to be a list')
        __self__.allocation_pools = allocation_pools
        __props__['allocationPools'] = allocation_pools

        if not cidr:
            raise TypeError('Missing required property cidr')
        elif not isinstance(cidr, basestring):
            raise TypeError('Expected property cidr to be a basestring')
        __self__.cidr = cidr
        __props__['cidr'] = cidr

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if dns_nameservers and not isinstance(dns_nameservers, list):
            raise TypeError('Expected property dns_nameservers to be a list')
        __self__.dns_nameservers = dns_nameservers
        __props__['dnsNameservers'] = dns_nameservers

        if enable_dhcp and not isinstance(enable_dhcp, bool):
            raise TypeError('Expected property enable_dhcp to be a bool')
        __self__.enable_dhcp = enable_dhcp
        __props__['enableDhcp'] = enable_dhcp

        if gateway_ip and not isinstance(gateway_ip, basestring):
            raise TypeError('Expected property gateway_ip to be a basestring')
        __self__.gateway_ip = gateway_ip
        __props__['gatewayIp'] = gateway_ip

        if host_routes and not isinstance(host_routes, list):
            raise TypeError('Expected property host_routes to be a list')
        __self__.host_routes = host_routes
        __props__['hostRoutes'] = host_routes

        if ip_version and not isinstance(ip_version, int):
            raise TypeError('Expected property ip_version to be a int')
        __self__.ip_version = ip_version
        __props__['ipVersion'] = ip_version

        if ipv6_address_mode and not isinstance(ipv6_address_mode, basestring):
            raise TypeError('Expected property ipv6_address_mode to be a basestring')
        __self__.ipv6_address_mode = ipv6_address_mode
        __props__['ipv6AddressMode'] = ipv6_address_mode

        if ipv6_ra_mode and not isinstance(ipv6_ra_mode, basestring):
            raise TypeError('Expected property ipv6_ra_mode to be a basestring')
        __self__.ipv6_ra_mode = ipv6_ra_mode
        __props__['ipv6RaMode'] = ipv6_ra_mode

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not network_id:
            raise TypeError('Missing required property network_id')
        elif not isinstance(network_id, basestring):
            raise TypeError('Expected property network_id to be a basestring')
        __self__.network_id = network_id
        __props__['networkId'] = network_id

        if no_gateway and not isinstance(no_gateway, bool):
            raise TypeError('Expected property no_gateway to be a bool')
        __self__.no_gateway = no_gateway
        __props__['noGateway'] = no_gateway

        if ntp_servers and not isinstance(ntp_servers, list):
            raise TypeError('Expected property ntp_servers to be a list')
        __self__.ntp_servers = ntp_servers
        __props__['ntpServers'] = ntp_servers

        if status and not isinstance(status, basestring):
            raise TypeError('Expected property status to be a basestring')
        __self__.status = status
        __props__['status'] = status

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        __props__['tags'] = tags

        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected property tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        __props__['tenantId'] = tenant_id

        super(Subnet, __self__).__init__(
            'ecl:network/subnet:Subnet',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'allocationPools' in outs:
            self.allocation_pools = outs['allocationPools']
        if 'cidr' in outs:
            self.cidr = outs['cidr']
        if 'description' in outs:
            self.description = outs['description']
        if 'dnsNameservers' in outs:
            self.dns_nameservers = outs['dnsNameservers']
        if 'enableDhcp' in outs:
            self.enable_dhcp = outs['enableDhcp']
        if 'gatewayIp' in outs:
            self.gateway_ip = outs['gatewayIp']
        if 'hostRoutes' in outs:
            self.host_routes = outs['hostRoutes']
        if 'ipVersion' in outs:
            self.ip_version = outs['ipVersion']
        if 'ipv6AddressMode' in outs:
            self.ipv6_address_mode = outs['ipv6AddressMode']
        if 'ipv6RaMode' in outs:
            self.ipv6_ra_mode = outs['ipv6RaMode']
        if 'name' in outs:
            self.name = outs['name']
        if 'networkId' in outs:
            self.network_id = outs['networkId']
        if 'noGateway' in outs:
            self.no_gateway = outs['noGateway']
        if 'ntpServers' in outs:
            self.ntp_servers = outs['ntpServers']
        if 'status' in outs:
            self.status = outs['status']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'tenantId' in outs:
            self.tenant_id = outs['tenantId']
