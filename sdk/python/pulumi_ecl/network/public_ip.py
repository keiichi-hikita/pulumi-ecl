# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class PublicIP(pulumi.CustomResource):
    cidr: pulumi.Output[str]
    description: pulumi.Output[str]
    internet_gw_id: pulumi.Output[str]
    name: pulumi.Output[str]
    region: pulumi.Output[str]
    submask_length: pulumi.Output[int]
    tenant_id: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, description=None, internet_gw_id=None, name=None, region=None, submask_length=None, tenant_id=None, __name__=None, __opts__=None):
        """
        Create a PublicIP resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description
        :param pulumi.Input[str] internet_gw_id
        :param pulumi.Input[str] name
        :param pulumi.Input[str] region
        :param pulumi.Input[int] submask_length
        :param pulumi.Input[str] tenant_id
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        if internet_gw_id is None:
            raise TypeError('Missing required property internet_gw_id')
        __props__['internet_gw_id'] = internet_gw_id

        __props__['name'] = name

        __props__['region'] = region

        if submask_length is None:
            raise TypeError('Missing required property submask_length')
        __props__['submask_length'] = submask_length

        __props__['tenant_id'] = tenant_id

        __props__['cidr'] = None

        super(PublicIP, __self__).__init__(
            'ecl:network/publicIP:PublicIP',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

