# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Port(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, admin_state_up=None, allowed_address_pairs=None, description=None, device_id=None, device_owner=None, fixed_ips=None, mac_address=None, name=None, network_id=None, no_fixed_ip=None, region=None, segmentation_id=None, segmentation_type=None, status=None, tags=None, tenant_id=None):
        """Create a Port resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if admin_state_up and not isinstance(admin_state_up, bool):
            raise TypeError('Expected property admin_state_up to be a bool')
        __self__.admin_state_up = admin_state_up
        __props__['adminStateUp'] = admin_state_up

        if allowed_address_pairs and not isinstance(allowed_address_pairs, list):
            raise TypeError('Expected property allowed_address_pairs to be a list')
        __self__.allowed_address_pairs = allowed_address_pairs
        __props__['allowedAddressPairs'] = allowed_address_pairs

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if device_id and not isinstance(device_id, basestring):
            raise TypeError('Expected property device_id to be a basestring')
        __self__.device_id = device_id
        __props__['deviceId'] = device_id

        if device_owner and not isinstance(device_owner, basestring):
            raise TypeError('Expected property device_owner to be a basestring')
        __self__.device_owner = device_owner
        __props__['deviceOwner'] = device_owner

        if fixed_ips and not isinstance(fixed_ips, list):
            raise TypeError('Expected property fixed_ips to be a list')
        __self__.fixed_ips = fixed_ips
        __props__['fixedIps'] = fixed_ips

        if mac_address and not isinstance(mac_address, basestring):
            raise TypeError('Expected property mac_address to be a basestring')
        __self__.mac_address = mac_address
        __props__['macAddress'] = mac_address

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not network_id:
            raise TypeError('Missing required property network_id')
        elif not isinstance(network_id, basestring):
            raise TypeError('Expected property network_id to be a basestring')
        __self__.network_id = network_id
        __props__['networkId'] = network_id

        if no_fixed_ip and not isinstance(no_fixed_ip, bool):
            raise TypeError('Expected property no_fixed_ip to be a bool')
        __self__.no_fixed_ip = no_fixed_ip
        __props__['noFixedIp'] = no_fixed_ip

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if segmentation_id and not isinstance(segmentation_id, int):
            raise TypeError('Expected property segmentation_id to be a int')
        __self__.segmentation_id = segmentation_id
        __props__['segmentationId'] = segmentation_id

        if segmentation_type and not isinstance(segmentation_type, basestring):
            raise TypeError('Expected property segmentation_type to be a basestring')
        __self__.segmentation_type = segmentation_type
        __props__['segmentationType'] = segmentation_type

        if status and not isinstance(status, basestring):
            raise TypeError('Expected property status to be a basestring')
        __self__.status = status
        __props__['status'] = status

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        __props__['tags'] = tags

        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected property tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        __props__['tenantId'] = tenant_id

        __self__.all_fixed_ips = pulumi.runtime.UNKNOWN

        super(Port, __self__).__init__(
            'ecl:network/port:Port',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'adminStateUp' in outs:
            self.admin_state_up = outs['adminStateUp']
        if 'allFixedIps' in outs:
            self.all_fixed_ips = outs['allFixedIps']
        if 'allowedAddressPairs' in outs:
            self.allowed_address_pairs = outs['allowedAddressPairs']
        if 'description' in outs:
            self.description = outs['description']
        if 'deviceId' in outs:
            self.device_id = outs['deviceId']
        if 'deviceOwner' in outs:
            self.device_owner = outs['deviceOwner']
        if 'fixedIps' in outs:
            self.fixed_ips = outs['fixedIps']
        if 'macAddress' in outs:
            self.mac_address = outs['macAddress']
        if 'name' in outs:
            self.name = outs['name']
        if 'networkId' in outs:
            self.network_id = outs['networkId']
        if 'noFixedIp' in outs:
            self.no_fixed_ip = outs['noFixedIp']
        if 'region' in outs:
            self.region = outs['region']
        if 'segmentationId' in outs:
            self.segmentation_id = outs['segmentationId']
        if 'segmentationType' in outs:
            self.segmentation_type = outs['segmentationType']
        if 'status' in outs:
            self.status = outs['status']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'tenantId' in outs:
            self.tenant_id = outs['tenantId']
