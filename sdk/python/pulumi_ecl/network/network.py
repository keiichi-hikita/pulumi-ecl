# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Network(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, admin_state_up=None, description=None, name=None, plane=None, status=None, subnets=None, tags=None, tenant_id=None):
        """Create a Network resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if admin_state_up and not isinstance(admin_state_up, basestring):
            raise TypeError('Expected property admin_state_up to be a basestring')
        __self__.admin_state_up = admin_state_up
        __props__['adminStateUp'] = admin_state_up

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if plane and not isinstance(plane, basestring):
            raise TypeError('Expected property plane to be a basestring')
        __self__.plane = plane
        __props__['plane'] = plane

        if status and not isinstance(status, basestring):
            raise TypeError('Expected property status to be a basestring')
        __self__.status = status
        __props__['status'] = status

        if subnets and not isinstance(subnets, list):
            raise TypeError('Expected property subnets to be a list')
        __self__.subnets = subnets
        __props__['subnets'] = subnets

        if tags and not isinstance(tags, dict):
            raise TypeError('Expected property tags to be a dict')
        __self__.tags = tags
        __props__['tags'] = tags

        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected property tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        __props__['tenantId'] = tenant_id

        super(Network, __self__).__init__(
            'ecl:network/network:Network',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'adminStateUp' in outs:
            self.admin_state_up = outs['adminStateUp']
        if 'description' in outs:
            self.description = outs['description']
        if 'name' in outs:
            self.name = outs['name']
        if 'plane' in outs:
            self.plane = outs['plane']
        if 'status' in outs:
            self.status = outs['status']
        if 'subnets' in outs:
            self.subnets = outs['subnets']
        if 'tags' in outs:
            self.tags = outs['tags']
        if 'tenantId' in outs:
            self.tenant_id = outs['tenantId']
