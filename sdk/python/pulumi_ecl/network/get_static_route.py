# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class GetStaticRouteResult(object):
    """
    A collection of values returned by getStaticRoute.
    """
    def __init__(__self__, aws_gw_id=None, azure_gw_id=None, description=None, destination=None, gcp_gw_id=None, interdc_gw_id=None, internet_gw_id=None, name=None, nexthop=None, region=None, service_type=None, static_route_id=None, tenant_id=None, vpn_gw_id=None, id=None):
        if aws_gw_id and not isinstance(aws_gw_id, basestring):
            raise TypeError('Expected argument aws_gw_id to be a basestring')
        __self__.aws_gw_id = aws_gw_id
        if azure_gw_id and not isinstance(azure_gw_id, basestring):
            raise TypeError('Expected argument azure_gw_id to be a basestring')
        __self__.azure_gw_id = azure_gw_id
        if description and not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        if destination and not isinstance(destination, basestring):
            raise TypeError('Expected argument destination to be a basestring')
        __self__.destination = destination
        if gcp_gw_id and not isinstance(gcp_gw_id, basestring):
            raise TypeError('Expected argument gcp_gw_id to be a basestring')
        __self__.gcp_gw_id = gcp_gw_id
        if interdc_gw_id and not isinstance(interdc_gw_id, basestring):
            raise TypeError('Expected argument interdc_gw_id to be a basestring')
        __self__.interdc_gw_id = interdc_gw_id
        if internet_gw_id and not isinstance(internet_gw_id, basestring):
            raise TypeError('Expected argument internet_gw_id to be a basestring')
        __self__.internet_gw_id = internet_gw_id
        if name and not isinstance(name, basestring):
            raise TypeError('Expected argument name to be a basestring')
        __self__.name = name
        if nexthop and not isinstance(nexthop, basestring):
            raise TypeError('Expected argument nexthop to be a basestring')
        __self__.nexthop = nexthop
        if region and not isinstance(region, basestring):
            raise TypeError('Expected argument region to be a basestring')
        __self__.region = region
        if service_type and not isinstance(service_type, basestring):
            raise TypeError('Expected argument service_type to be a basestring')
        __self__.service_type = service_type
        if static_route_id and not isinstance(static_route_id, basestring):
            raise TypeError('Expected argument static_route_id to be a basestring')
        __self__.static_route_id = static_route_id
        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected argument tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        if vpn_gw_id and not isinstance(vpn_gw_id, basestring):
            raise TypeError('Expected argument vpn_gw_id to be a basestring')
        __self__.vpn_gw_id = vpn_gw_id
        if id and not isinstance(id, basestring):
            raise TypeError('Expected argument id to be a basestring')
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

def get_static_route(aws_gw_id=None, azure_gw_id=None, description=None, destination=None, gcp_gw_id=None, interdc_gw_id=None, internet_gw_id=None, name=None, nexthop=None, region=None, service_type=None, static_route_id=None, status=None, tenant_id=None, vpn_gw_id=None):
    __args__ = dict()

    __args__['awsGwId'] = aws_gw_id
    __args__['azureGwId'] = azure_gw_id
    __args__['description'] = description
    __args__['destination'] = destination
    __args__['gcpGwId'] = gcp_gw_id
    __args__['interdcGwId'] = interdc_gw_id
    __args__['internetGwId'] = internet_gw_id
    __args__['name'] = name
    __args__['nexthop'] = nexthop
    __args__['region'] = region
    __args__['serviceType'] = service_type
    __args__['staticRouteId'] = static_route_id
    __args__['status'] = status
    __args__['tenantId'] = tenant_id
    __args__['vpnGwId'] = vpn_gw_id
    __ret__ = pulumi.runtime.invoke('ecl:network/getStaticRoute:getStaticRoute', __args__)

    return GetStaticRouteResult(
        aws_gw_id=__ret__.get('awsGwId'),
        azure_gw_id=__ret__.get('azureGwId'),
        description=__ret__.get('description'),
        destination=__ret__.get('destination'),
        gcp_gw_id=__ret__.get('gcpGwId'),
        interdc_gw_id=__ret__.get('interdcGwId'),
        internet_gw_id=__ret__.get('internetGwId'),
        name=__ret__.get('name'),
        nexthop=__ret__.get('nexthop'),
        region=__ret__.get('region'),
        service_type=__ret__.get('serviceType'),
        static_route_id=__ret__.get('staticRouteId'),
        tenant_id=__ret__.get('tenantId'),
        vpn_gw_id=__ret__.get('vpnGwId'),
        id=__ret__.get('id'))
