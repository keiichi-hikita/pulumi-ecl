# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class GatewayInterface(pulumi.CustomResource):
    aws_gw_id: pulumi.Output[str]
    azure_gw_id: pulumi.Output[str]
    description: pulumi.Output[str]
    gcp_gw_id: pulumi.Output[str]
    gw_vipv4: pulumi.Output[str]
    gw_vipv6: pulumi.Output[str]
    interdc_gw_id: pulumi.Output[str]
    internet_gw_id: pulumi.Output[str]
    name: pulumi.Output[str]
    netmask: pulumi.Output[int]
    network_id: pulumi.Output[str]
    primary_ipv4: pulumi.Output[str]
    primary_ipv6: pulumi.Output[str]
    region: pulumi.Output[str]
    secondary_ipv4: pulumi.Output[str]
    secondary_ipv6: pulumi.Output[str]
    service_type: pulumi.Output[str]
    tenant_id: pulumi.Output[str]
    vpn_gw_id: pulumi.Output[str]
    vrid: pulumi.Output[int]
    def __init__(__self__, resource_name, opts=None, aws_gw_id=None, azure_gw_id=None, description=None, gcp_gw_id=None, gw_vipv4=None, gw_vipv6=None, interdc_gw_id=None, internet_gw_id=None, name=None, netmask=None, network_id=None, primary_ipv4=None, primary_ipv6=None, region=None, secondary_ipv4=None, secondary_ipv6=None, service_type=None, tenant_id=None, vpn_gw_id=None, vrid=None, __name__=None, __opts__=None):
        """
        Create a GatewayInterface resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aws_gw_id
        :param pulumi.Input[str] azure_gw_id
        :param pulumi.Input[str] description
        :param pulumi.Input[str] gcp_gw_id
        :param pulumi.Input[str] gw_vipv4
        :param pulumi.Input[str] gw_vipv6
        :param pulumi.Input[str] interdc_gw_id
        :param pulumi.Input[str] internet_gw_id
        :param pulumi.Input[str] name
        :param pulumi.Input[int] netmask
        :param pulumi.Input[str] network_id
        :param pulumi.Input[str] primary_ipv4
        :param pulumi.Input[str] primary_ipv6
        :param pulumi.Input[str] region
        :param pulumi.Input[str] secondary_ipv4
        :param pulumi.Input[str] secondary_ipv6
        :param pulumi.Input[str] service_type
        :param pulumi.Input[str] tenant_id
        :param pulumi.Input[str] vpn_gw_id
        :param pulumi.Input[int] vrid
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['aws_gw_id'] = aws_gw_id

        __props__['azure_gw_id'] = azure_gw_id

        __props__['description'] = description

        __props__['gcp_gw_id'] = gcp_gw_id

        if gw_vipv4 is None:
            raise TypeError('Missing required property gw_vipv4')
        __props__['gw_vipv4'] = gw_vipv4

        __props__['gw_vipv6'] = gw_vipv6

        __props__['interdc_gw_id'] = interdc_gw_id

        __props__['internet_gw_id'] = internet_gw_id

        __props__['name'] = name

        if netmask is None:
            raise TypeError('Missing required property netmask')
        __props__['netmask'] = netmask

        if network_id is None:
            raise TypeError('Missing required property network_id')
        __props__['network_id'] = network_id

        if primary_ipv4 is None:
            raise TypeError('Missing required property primary_ipv4')
        __props__['primary_ipv4'] = primary_ipv4

        __props__['primary_ipv6'] = primary_ipv6

        __props__['region'] = region

        if secondary_ipv4 is None:
            raise TypeError('Missing required property secondary_ipv4')
        __props__['secondary_ipv4'] = secondary_ipv4

        __props__['secondary_ipv6'] = secondary_ipv6

        if service_type is None:
            raise TypeError('Missing required property service_type')
        __props__['service_type'] = service_type

        __props__['tenant_id'] = tenant_id

        __props__['vpn_gw_id'] = vpn_gw_id

        if vrid is None:
            raise TypeError('Missing required property vrid')
        __props__['vrid'] = vrid

        super(GatewayInterface, __self__).__init__(
            'ecl:network/gatewayInterface:GatewayInterface',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

