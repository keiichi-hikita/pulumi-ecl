# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class GatewayInterface(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, aws_gw_id=None, azure_gw_id=None, description=None, gcp_gw_id=None, gw_vipv4=None, gw_vipv6=None, interdc_gw_id=None, internet_gw_id=None, name=None, netmask=None, network_id=None, primary_ipv4=None, primary_ipv6=None, region=None, secondary_ipv4=None, secondary_ipv6=None, service_type=None, tenant_id=None, vpn_gw_id=None, vrid=None):
        """Create a GatewayInterface resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if aws_gw_id and not isinstance(aws_gw_id, basestring):
            raise TypeError('Expected property aws_gw_id to be a basestring')
        __self__.aws_gw_id = aws_gw_id
        __props__['awsGwId'] = aws_gw_id

        if azure_gw_id and not isinstance(azure_gw_id, basestring):
            raise TypeError('Expected property azure_gw_id to be a basestring')
        __self__.azure_gw_id = azure_gw_id
        __props__['azureGwId'] = azure_gw_id

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if gcp_gw_id and not isinstance(gcp_gw_id, basestring):
            raise TypeError('Expected property gcp_gw_id to be a basestring')
        __self__.gcp_gw_id = gcp_gw_id
        __props__['gcpGwId'] = gcp_gw_id

        if not gw_vipv4:
            raise TypeError('Missing required property gw_vipv4')
        elif not isinstance(gw_vipv4, basestring):
            raise TypeError('Expected property gw_vipv4 to be a basestring')
        __self__.gw_vipv4 = gw_vipv4
        __props__['gwVipv4'] = gw_vipv4

        if gw_vipv6 and not isinstance(gw_vipv6, basestring):
            raise TypeError('Expected property gw_vipv6 to be a basestring')
        __self__.gw_vipv6 = gw_vipv6
        __props__['gwVipv6'] = gw_vipv6

        if interdc_gw_id and not isinstance(interdc_gw_id, basestring):
            raise TypeError('Expected property interdc_gw_id to be a basestring')
        __self__.interdc_gw_id = interdc_gw_id
        __props__['interdcGwId'] = interdc_gw_id

        if internet_gw_id and not isinstance(internet_gw_id, basestring):
            raise TypeError('Expected property internet_gw_id to be a basestring')
        __self__.internet_gw_id = internet_gw_id
        __props__['internetGwId'] = internet_gw_id

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not netmask:
            raise TypeError('Missing required property netmask')
        elif not isinstance(netmask, int):
            raise TypeError('Expected property netmask to be a int')
        __self__.netmask = netmask
        __props__['netmask'] = netmask

        if not network_id:
            raise TypeError('Missing required property network_id')
        elif not isinstance(network_id, basestring):
            raise TypeError('Expected property network_id to be a basestring')
        __self__.network_id = network_id
        __props__['networkId'] = network_id

        if not primary_ipv4:
            raise TypeError('Missing required property primary_ipv4')
        elif not isinstance(primary_ipv4, basestring):
            raise TypeError('Expected property primary_ipv4 to be a basestring')
        __self__.primary_ipv4 = primary_ipv4
        __props__['primaryIpv4'] = primary_ipv4

        if primary_ipv6 and not isinstance(primary_ipv6, basestring):
            raise TypeError('Expected property primary_ipv6 to be a basestring')
        __self__.primary_ipv6 = primary_ipv6
        __props__['primaryIpv6'] = primary_ipv6

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if not secondary_ipv4:
            raise TypeError('Missing required property secondary_ipv4')
        elif not isinstance(secondary_ipv4, basestring):
            raise TypeError('Expected property secondary_ipv4 to be a basestring')
        __self__.secondary_ipv4 = secondary_ipv4
        __props__['secondaryIpv4'] = secondary_ipv4

        if secondary_ipv6 and not isinstance(secondary_ipv6, basestring):
            raise TypeError('Expected property secondary_ipv6 to be a basestring')
        __self__.secondary_ipv6 = secondary_ipv6
        __props__['secondaryIpv6'] = secondary_ipv6

        if not service_type:
            raise TypeError('Missing required property service_type')
        elif not isinstance(service_type, basestring):
            raise TypeError('Expected property service_type to be a basestring')
        __self__.service_type = service_type
        __props__['serviceType'] = service_type

        if tenant_id and not isinstance(tenant_id, basestring):
            raise TypeError('Expected property tenant_id to be a basestring')
        __self__.tenant_id = tenant_id
        __props__['tenantId'] = tenant_id

        if vpn_gw_id and not isinstance(vpn_gw_id, basestring):
            raise TypeError('Expected property vpn_gw_id to be a basestring')
        __self__.vpn_gw_id = vpn_gw_id
        __props__['vpnGwId'] = vpn_gw_id

        if not vrid:
            raise TypeError('Missing required property vrid')
        elif not isinstance(vrid, int):
            raise TypeError('Expected property vrid to be a int')
        __self__.vrid = vrid
        __props__['vrid'] = vrid

        super(GatewayInterface, __self__).__init__(
            'ecl:network/gatewayInterface:GatewayInterface',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'awsGwId' in outs:
            self.aws_gw_id = outs['awsGwId']
        if 'azureGwId' in outs:
            self.azure_gw_id = outs['azureGwId']
        if 'description' in outs:
            self.description = outs['description']
        if 'gcpGwId' in outs:
            self.gcp_gw_id = outs['gcpGwId']
        if 'gwVipv4' in outs:
            self.gw_vipv4 = outs['gwVipv4']
        if 'gwVipv6' in outs:
            self.gw_vipv6 = outs['gwVipv6']
        if 'interdcGwId' in outs:
            self.interdc_gw_id = outs['interdcGwId']
        if 'internetGwId' in outs:
            self.internet_gw_id = outs['internetGwId']
        if 'name' in outs:
            self.name = outs['name']
        if 'netmask' in outs:
            self.netmask = outs['netmask']
        if 'networkId' in outs:
            self.network_id = outs['networkId']
        if 'primaryIpv4' in outs:
            self.primary_ipv4 = outs['primaryIpv4']
        if 'primaryIpv6' in outs:
            self.primary_ipv6 = outs['primaryIpv6']
        if 'region' in outs:
            self.region = outs['region']
        if 'secondaryIpv4' in outs:
            self.secondary_ipv4 = outs['secondaryIpv4']
        if 'secondaryIpv6' in outs:
            self.secondary_ipv6 = outs['secondaryIpv6']
        if 'serviceType' in outs:
            self.service_type = outs['serviceType']
        if 'tenantId' in outs:
            self.tenant_id = outs['tenantId']
        if 'vpnGwId' in outs:
            self.vpn_gw_id = outs['vpnGwId']
        if 'vrid' in outs:
            self.vrid = outs['vrid']
