# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Volume(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, availability_zone=None, description=None, error_message=None, initiator_iqns=None, iops_per_gb=None, name=None, size=None, throughput=None, virtual_storage_id=None):
        """Create a Volume resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if availability_zone and not isinstance(availability_zone, basestring):
            raise TypeError('Expected property availability_zone to be a basestring')
        __self__.availability_zone = availability_zone
        __props__['availabilityZone'] = availability_zone

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if error_message and not isinstance(error_message, basestring):
            raise TypeError('Expected property error_message to be a basestring')
        __self__.error_message = error_message
        __props__['errorMessage'] = error_message

        if initiator_iqns and not isinstance(initiator_iqns, list):
            raise TypeError('Expected property initiator_iqns to be a list')
        __self__.initiator_iqns = initiator_iqns
        __props__['initiatorIqns'] = initiator_iqns

        if iops_per_gb and not isinstance(iops_per_gb, basestring):
            raise TypeError('Expected property iops_per_gb to be a basestring')
        __self__.iops_per_gb = iops_per_gb
        __props__['iopsPerGb'] = iops_per_gb

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not size:
            raise TypeError('Missing required property size')
        elif not isinstance(size, int):
            raise TypeError('Expected property size to be a int')
        __self__.size = size
        __props__['size'] = size

        if throughput and not isinstance(throughput, basestring):
            raise TypeError('Expected property throughput to be a basestring')
        __self__.throughput = throughput
        __props__['throughput'] = throughput

        if not virtual_storage_id:
            raise TypeError('Missing required property virtual_storage_id')
        elif not isinstance(virtual_storage_id, basestring):
            raise TypeError('Expected property virtual_storage_id to be a basestring')
        __self__.virtual_storage_id = virtual_storage_id
        __props__['virtualStorageId'] = virtual_storage_id

        super(Volume, __self__).__init__(
            'ecl:storage/volume:Volume',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'availabilityZone' in outs:
            self.availability_zone = outs['availabilityZone']
        if 'description' in outs:
            self.description = outs['description']
        if 'errorMessage' in outs:
            self.error_message = outs['errorMessage']
        if 'initiatorIqns' in outs:
            self.initiator_iqns = outs['initiatorIqns']
        if 'iopsPerGb' in outs:
            self.iops_per_gb = outs['iopsPerGb']
        if 'name' in outs:
            self.name = outs['name']
        if 'size' in outs:
            self.size = outs['size']
        if 'throughput' in outs:
            self.throughput = outs['throughput']
        if 'virtualStorageId' in outs:
            self.virtual_storage_id = outs['virtualStorageId']
