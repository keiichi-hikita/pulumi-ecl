# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class VirtualStorage(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, description=None, error_message=None, host_routes=None, ip_addr_pool=None, name=None, network_id=None, subnet_id=None, volume_type_id=None, volume_type_name=None):
        """Create a VirtualStorage resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if error_message and not isinstance(error_message, basestring):
            raise TypeError('Expected property error_message to be a basestring')
        __self__.error_message = error_message
        __props__['errorMessage'] = error_message

        if host_routes and not isinstance(host_routes, list):
            raise TypeError('Expected property host_routes to be a list')
        __self__.host_routes = host_routes
        __props__['hostRoutes'] = host_routes

        if not ip_addr_pool:
            raise TypeError('Missing required property ip_addr_pool')
        elif not isinstance(ip_addr_pool, dict):
            raise TypeError('Expected property ip_addr_pool to be a dict')
        __self__.ip_addr_pool = ip_addr_pool
        __props__['ipAddrPool'] = ip_addr_pool

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not network_id:
            raise TypeError('Missing required property network_id')
        elif not isinstance(network_id, basestring):
            raise TypeError('Expected property network_id to be a basestring')
        __self__.network_id = network_id
        __props__['networkId'] = network_id

        if not subnet_id:
            raise TypeError('Missing required property subnet_id')
        elif not isinstance(subnet_id, basestring):
            raise TypeError('Expected property subnet_id to be a basestring')
        __self__.subnet_id = subnet_id
        __props__['subnetId'] = subnet_id

        if volume_type_id and not isinstance(volume_type_id, basestring):
            raise TypeError('Expected property volume_type_id to be a basestring')
        __self__.volume_type_id = volume_type_id
        __props__['volumeTypeId'] = volume_type_id

        if volume_type_name and not isinstance(volume_type_name, basestring):
            raise TypeError('Expected property volume_type_name to be a basestring')
        __self__.volume_type_name = volume_type_name
        __props__['volumeTypeName'] = volume_type_name

        super(VirtualStorage, __self__).__init__(
            'ecl:storage/virtualStorage:VirtualStorage',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'errorMessage' in outs:
            self.error_message = outs['errorMessage']
        if 'hostRoutes' in outs:
            self.host_routes = outs['hostRoutes']
        if 'ipAddrPool' in outs:
            self.ip_addr_pool = outs['ipAddrPool']
        if 'name' in outs:
            self.name = outs['name']
        if 'networkId' in outs:
            self.network_id = outs['networkId']
        if 'subnetId' in outs:
            self.subnet_id = outs['subnetId']
        if 'volumeTypeId' in outs:
            self.volume_type_id = outs['volumeTypeId']
        if 'volumeTypeName' in outs:
            self.volume_type_name = outs['volumeTypeName']
