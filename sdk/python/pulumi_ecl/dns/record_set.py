# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class RecordSet(pulumi.CustomResource):
    """
    Manages a V2 recordset resource within Enterprise Cloud.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, name=None, record=None, ttl=None, type=None, zone_id=None):
        """Create a RecordSet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description for the recordset.
        """
        __props__['description'] = description

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        DNS Name for the recordset.
        """
        __props__['name'] = name

        if not record:
            raise TypeError('Missing required property record')
        elif not isinstance(record, basestring):
            raise TypeError('Expected property record to be a basestring')
        __self__.record = record
        """
        Data for the recordset.
        """
        __props__['record'] = record

        if not ttl:
            raise TypeError('Missing required property ttl')
        elif not isinstance(ttl, int):
            raise TypeError('Expected property ttl to be a int')
        __self__.ttl = ttl
        """
        TTL (Time to Live) for the recordset.
        """
        __props__['ttl'] = ttl

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        RRTYPE of the recordset. 
        Valid Values: A | AAAA | MX | CNAME | SRV | SPF | TXT | PTR | NS
        """
        __props__['type'] = type

        if not zone_id:
            raise TypeError('Missing required property zone_id')
        elif not isinstance(zone_id, basestring):
            raise TypeError('Expected property zone_id to be a basestring')
        __self__.zone_id = zone_id
        """
        Zone ID for the recordset.
        """
        __props__['zoneId'] = zone_id

        super(RecordSet, __self__).__init__(
            'ecl:dns/recordSet:RecordSet',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'name' in outs:
            self.name = outs['name']
        if 'record' in outs:
            self.record = outs['record']
        if 'ttl' in outs:
            self.ttl = outs['ttl']
        if 'type' in outs:
            self.type = outs['type']
        if 'zoneId' in outs:
            self.zone_id = outs['zoneId']
