# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Zone(pulumi.CustomResource):
    """
    Manages a V2 zone resource of Enterprise Cloud.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, email=None, masters=None, name=None, ttl=None, type=None):
        """Create a Zone resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description for this zone.
        """
        __props__['description'] = description

        if email and not isinstance(email, basestring):
            raise TypeError('Expected property email to be a basestring')
        __self__.email = email
        """
        E-mail for the zone.
        Used in SOA records for the zone.
        This parameter is not currently supported.
        Even if you set this parameter, it will be ignored.
        """
        __props__['email'] = email

        if masters and not isinstance(masters, list):
            raise TypeError('Expected property masters to be a list')
        __self__.masters = masters
        """
        For secondary zones. 
        The servers to slave from to get DNS information.
        """
        __props__['masters'] = masters

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        DNS Name for the zone.
        """
        __props__['name'] = name

        if ttl and not isinstance(ttl, int):
            raise TypeError('Expected property ttl to be a int')
        __self__.ttl = ttl
        """
        TTL (Time to Live) for the zone.
        This parameter is not currently supported.
        Even if you set this parameter, it will be ignored.
        """
        __props__['ttl'] = ttl

        if type and not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        Type of zone.
        PRIMARY is controlled by ECL2.0 DNS,
        SECONDARY zones are slaved from another DNS Server.
        Defaults to PRIMARY.
        This parameter is not currently supported.
        Even if you set this parameter, it will be ignored.
        """
        __props__['type'] = type

        super(Zone, __self__).__init__(
            'ecl:dns/zone:Zone',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'email' in outs:
            self.email = outs['email']
        if 'masters' in outs:
            self.masters = outs['masters']
        if 'name' in outs:
            self.name = outs['name']
        if 'ttl' in outs:
            self.ttl = outs['ttl']
        if 'type' in outs:
            self.type = outs['type']
