// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ImageMember extends pulumi.CustomResource {
    /**
     * Get an existing ImageMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageMemberState, opts?: pulumi.CustomResourceOptions): ImageMember {
        return new ImageMember(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly memberId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly schema!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ImageMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageMemberArgs | ImageMemberState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ImageMemberState | undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["memberId"] = state ? state.memberId : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["schema"] = state ? state.schema : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ImageMemberArgs | undefined;
            if (!args || args.imageId === undefined) {
                throw new Error("Missing required property 'imageId'");
            }
            if (!args || args.memberId === undefined) {
                throw new Error("Missing required property 'memberId'");
            }
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["memberId"] = args ? args.memberId : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["schema"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        super("ecl:imagestorages/imageMember:ImageMember", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageMember resources.
 */
export interface ImageMemberState {
    readonly createdAt?: pulumi.Input<string>;
    readonly imageId?: pulumi.Input<string>;
    readonly memberId?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly schema?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageMember resource.
 */
export interface ImageMemberArgs {
    readonly imageId: pulumi.Input<string>;
    readonly memberId: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
}
