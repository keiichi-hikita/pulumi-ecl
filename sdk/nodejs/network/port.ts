// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Port extends pulumi.CustomResource {
    /**
     * Get an existing Port resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortState, opts?: pulumi.CustomResourceOptions): Port {
        return new Port(name, <any>state, { ...opts, id: id });
    }

    public readonly adminStateUp!: pulumi.Output<boolean>;
    public /*out*/ readonly allFixedIps!: pulumi.Output<string[]>;
    public readonly allowedAddressPairs!: pulumi.Output<{ ipAddress: string, macAddress?: string }[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<string>;
    public readonly deviceOwner!: pulumi.Output<string>;
    public readonly fixedIps!: pulumi.Output<{ ipAddress?: string, subnetId: string }[] | undefined>;
    public readonly macAddress!: pulumi.Output<string>;
    public /*out*/ readonly managedByService!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly noFixedIp!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly segmentationId!: pulumi.Output<number>;
    public readonly segmentationType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a Port resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortArgs | PortState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PortState | undefined;
            inputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            inputs["allFixedIps"] = state ? state.allFixedIps : undefined;
            inputs["allowedAddressPairs"] = state ? state.allowedAddressPairs : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["deviceId"] = state ? state.deviceId : undefined;
            inputs["deviceOwner"] = state ? state.deviceOwner : undefined;
            inputs["fixedIps"] = state ? state.fixedIps : undefined;
            inputs["macAddress"] = state ? state.macAddress : undefined;
            inputs["managedByService"] = state ? state.managedByService : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["noFixedIp"] = state ? state.noFixedIp : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["segmentationId"] = state ? state.segmentationId : undefined;
            inputs["segmentationType"] = state ? state.segmentationType : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as PortArgs | undefined;
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            inputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            inputs["allowedAddressPairs"] = args ? args.allowedAddressPairs : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["deviceId"] = args ? args.deviceId : undefined;
            inputs["deviceOwner"] = args ? args.deviceOwner : undefined;
            inputs["fixedIps"] = args ? args.fixedIps : undefined;
            inputs["macAddress"] = args ? args.macAddress : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["noFixedIp"] = args ? args.noFixedIp : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["segmentationId"] = args ? args.segmentationId : undefined;
            inputs["segmentationType"] = args ? args.segmentationType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["allFixedIps"] = undefined /*out*/;
            inputs["managedByService"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("ecl:network/port:Port", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Port resources.
 */
export interface PortState {
    readonly adminStateUp?: pulumi.Input<boolean>;
    readonly allFixedIps?: pulumi.Input<pulumi.Input<string>[]>;
    readonly allowedAddressPairs?: pulumi.Input<pulumi.Input<{ ipAddress: pulumi.Input<string>, macAddress?: pulumi.Input<string> }>[]>;
    readonly description?: pulumi.Input<string>;
    readonly deviceId?: pulumi.Input<string>;
    readonly deviceOwner?: pulumi.Input<string>;
    readonly fixedIps?: pulumi.Input<pulumi.Input<{ ipAddress?: pulumi.Input<string>, subnetId: pulumi.Input<string> }>[]>;
    readonly macAddress?: pulumi.Input<string>;
    readonly managedByService?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<string>;
    readonly noFixedIp?: pulumi.Input<boolean>;
    readonly region?: pulumi.Input<string>;
    readonly segmentationId?: pulumi.Input<number>;
    readonly segmentationType?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Port resource.
 */
export interface PortArgs {
    readonly adminStateUp?: pulumi.Input<boolean>;
    readonly allowedAddressPairs?: pulumi.Input<pulumi.Input<{ ipAddress: pulumi.Input<string>, macAddress?: pulumi.Input<string> }>[]>;
    readonly description?: pulumi.Input<string>;
    readonly deviceId?: pulumi.Input<string>;
    readonly deviceOwner?: pulumi.Input<string>;
    readonly fixedIps?: pulumi.Input<pulumi.Input<{ ipAddress?: pulumi.Input<string>, subnetId: pulumi.Input<string> }>[]>;
    readonly macAddress?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkId: pulumi.Input<string>;
    readonly noFixedIp?: pulumi.Input<boolean>;
    readonly region?: pulumi.Input<string>;
    readonly segmentationId?: pulumi.Input<number>;
    readonly segmentationType?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId?: pulumi.Input<string>;
}
