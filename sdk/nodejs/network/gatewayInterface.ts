// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class GatewayInterface extends pulumi.CustomResource {
    /**
     * Get an existing GatewayInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayInterfaceState, opts?: pulumi.CustomResourceOptions): GatewayInterface {
        return new GatewayInterface(name, <any>state, { ...opts, id: id });
    }

    public readonly awsGwId: pulumi.Output<string | undefined>;
    public readonly azureGwId: pulumi.Output<string | undefined>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly gcpGwId: pulumi.Output<string | undefined>;
    public readonly gwVipv4: pulumi.Output<string>;
    public readonly gwVipv6: pulumi.Output<string | undefined>;
    public readonly interdcGwId: pulumi.Output<string | undefined>;
    public readonly internetGwId: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly netmask: pulumi.Output<number>;
    public readonly networkId: pulumi.Output<string>;
    public readonly primaryIpv4: pulumi.Output<string>;
    public readonly primaryIpv6: pulumi.Output<string | undefined>;
    public readonly region: pulumi.Output<string>;
    public readonly secondaryIpv4: pulumi.Output<string>;
    public readonly secondaryIpv6: pulumi.Output<string | undefined>;
    public readonly serviceType: pulumi.Output<string>;
    public readonly tenantId: pulumi.Output<string>;
    public readonly vpnGwId: pulumi.Output<string | undefined>;
    public readonly vrid: pulumi.Output<number>;

    /**
     * Create a GatewayInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayInterfaceArgs | GatewayInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: GatewayInterfaceState = argsOrState as GatewayInterfaceState | undefined;
            inputs["awsGwId"] = state ? state.awsGwId : undefined;
            inputs["azureGwId"] = state ? state.azureGwId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["gcpGwId"] = state ? state.gcpGwId : undefined;
            inputs["gwVipv4"] = state ? state.gwVipv4 : undefined;
            inputs["gwVipv6"] = state ? state.gwVipv6 : undefined;
            inputs["interdcGwId"] = state ? state.interdcGwId : undefined;
            inputs["internetGwId"] = state ? state.internetGwId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["netmask"] = state ? state.netmask : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            inputs["primaryIpv6"] = state ? state.primaryIpv6 : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["secondaryIpv4"] = state ? state.secondaryIpv4 : undefined;
            inputs["secondaryIpv6"] = state ? state.secondaryIpv6 : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
            inputs["vpnGwId"] = state ? state.vpnGwId : undefined;
            inputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as GatewayInterfaceArgs | undefined;
            if (!args || args.gwVipv4 === undefined) {
                throw new Error("Missing required property 'gwVipv4'");
            }
            if (!args || args.netmask === undefined) {
                throw new Error("Missing required property 'netmask'");
            }
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            if (!args || args.primaryIpv4 === undefined) {
                throw new Error("Missing required property 'primaryIpv4'");
            }
            if (!args || args.secondaryIpv4 === undefined) {
                throw new Error("Missing required property 'secondaryIpv4'");
            }
            if (!args || args.serviceType === undefined) {
                throw new Error("Missing required property 'serviceType'");
            }
            if (!args || args.vrid === undefined) {
                throw new Error("Missing required property 'vrid'");
            }
            inputs["awsGwId"] = args ? args.awsGwId : undefined;
            inputs["azureGwId"] = args ? args.azureGwId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["gcpGwId"] = args ? args.gcpGwId : undefined;
            inputs["gwVipv4"] = args ? args.gwVipv4 : undefined;
            inputs["gwVipv6"] = args ? args.gwVipv6 : undefined;
            inputs["interdcGwId"] = args ? args.interdcGwId : undefined;
            inputs["internetGwId"] = args ? args.internetGwId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["netmask"] = args ? args.netmask : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["primaryIpv4"] = args ? args.primaryIpv4 : undefined;
            inputs["primaryIpv6"] = args ? args.primaryIpv6 : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["secondaryIpv4"] = args ? args.secondaryIpv4 : undefined;
            inputs["secondaryIpv6"] = args ? args.secondaryIpv6 : undefined;
            inputs["serviceType"] = args ? args.serviceType : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["vpnGwId"] = args ? args.vpnGwId : undefined;
            inputs["vrid"] = args ? args.vrid : undefined;
        }
        super("ecl:network/gatewayInterface:GatewayInterface", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayInterface resources.
 */
export interface GatewayInterfaceState {
    readonly awsGwId?: pulumi.Input<string>;
    readonly azureGwId?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly gcpGwId?: pulumi.Input<string>;
    readonly gwVipv4?: pulumi.Input<string>;
    readonly gwVipv6?: pulumi.Input<string>;
    readonly interdcGwId?: pulumi.Input<string>;
    readonly internetGwId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly netmask?: pulumi.Input<number>;
    readonly networkId?: pulumi.Input<string>;
    readonly primaryIpv4?: pulumi.Input<string>;
    readonly primaryIpv6?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly secondaryIpv4?: pulumi.Input<string>;
    readonly secondaryIpv6?: pulumi.Input<string>;
    readonly serviceType?: pulumi.Input<string>;
    readonly tenantId?: pulumi.Input<string>;
    readonly vpnGwId?: pulumi.Input<string>;
    readonly vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GatewayInterface resource.
 */
export interface GatewayInterfaceArgs {
    readonly awsGwId?: pulumi.Input<string>;
    readonly azureGwId?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly gcpGwId?: pulumi.Input<string>;
    readonly gwVipv4: pulumi.Input<string>;
    readonly gwVipv6?: pulumi.Input<string>;
    readonly interdcGwId?: pulumi.Input<string>;
    readonly internetGwId?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly netmask: pulumi.Input<number>;
    readonly networkId: pulumi.Input<string>;
    readonly primaryIpv4: pulumi.Input<string>;
    readonly primaryIpv6?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly secondaryIpv4: pulumi.Input<string>;
    readonly secondaryIpv6?: pulumi.Input<string>;
    readonly serviceType: pulumi.Input<string>;
    readonly tenantId?: pulumi.Input<string>;
    readonly vpnGwId?: pulumi.Input<string>;
    readonly vrid: pulumi.Input<number>;
}
