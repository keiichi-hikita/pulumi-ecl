// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    public readonly allocationPools!: pulumi.Output<{ end: string, start: string }[]>;
    public readonly cidr!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dnsNameservers!: pulumi.Output<string[]>;
    public readonly enableDhcp!: pulumi.Output<boolean>;
    public readonly gatewayIp!: pulumi.Output<string>;
    public readonly hostRoutes!: pulumi.Output<{ destinationCidr: string, nextHop: string }[] | undefined>;
    public readonly ipVersion!: pulumi.Output<number | undefined>;
    public /*out*/ readonly ipv6AddressMode!: pulumi.Output<string>;
    public /*out*/ readonly ipv6RaMode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly noGateway!: pulumi.Output<boolean | undefined>;
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SubnetState | undefined;
            inputs["allocationPools"] = state ? state.allocationPools : undefined;
            inputs["cidr"] = state ? state.cidr : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsNameservers"] = state ? state.dnsNameservers : undefined;
            inputs["enableDhcp"] = state ? state.enableDhcp : undefined;
            inputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            inputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            inputs["ipVersion"] = state ? state.ipVersion : undefined;
            inputs["ipv6AddressMode"] = state ? state.ipv6AddressMode : undefined;
            inputs["ipv6RaMode"] = state ? state.ipv6RaMode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["noGateway"] = state ? state.noGateway : undefined;
            inputs["ntpServers"] = state ? state.ntpServers : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (!args || args.cidr === undefined) {
                throw new Error("Missing required property 'cidr'");
            }
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            inputs["allocationPools"] = args ? args.allocationPools : undefined;
            inputs["cidr"] = args ? args.cidr : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsNameservers"] = args ? args.dnsNameservers : undefined;
            inputs["enableDhcp"] = args ? args.enableDhcp : undefined;
            inputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            inputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            inputs["ipVersion"] = args ? args.ipVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["noGateway"] = args ? args.noGateway : undefined;
            inputs["ntpServers"] = args ? args.ntpServers : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["ipv6AddressMode"] = undefined /*out*/;
            inputs["ipv6RaMode"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("ecl:network/subnet:Subnet", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    readonly allocationPools?: pulumi.Input<pulumi.Input<{ end: pulumi.Input<string>, start: pulumi.Input<string> }>[]>;
    readonly cidr?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableDhcp?: pulumi.Input<boolean>;
    readonly gatewayIp?: pulumi.Input<string>;
    readonly hostRoutes?: pulumi.Input<pulumi.Input<{ destinationCidr: pulumi.Input<string>, nextHop: pulumi.Input<string> }>[]>;
    readonly ipVersion?: pulumi.Input<number>;
    readonly ipv6AddressMode?: pulumi.Input<string>;
    readonly ipv6RaMode?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<string>;
    readonly noGateway?: pulumi.Input<boolean>;
    readonly ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly region?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    readonly allocationPools?: pulumi.Input<pulumi.Input<{ end: pulumi.Input<string>, start: pulumi.Input<string> }>[]>;
    readonly cidr: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly enableDhcp?: pulumi.Input<boolean>;
    readonly gatewayIp?: pulumi.Input<string>;
    readonly hostRoutes?: pulumi.Input<pulumi.Input<{ destinationCidr: pulumi.Input<string>, nextHop: pulumi.Input<string> }>[]>;
    readonly ipVersion?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly networkId: pulumi.Input<string>;
    readonly noGateway?: pulumi.Input<boolean>;
    readonly ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly region?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<{[key: string]: any}>;
    readonly tenantId?: pulumi.Input<string>;
}
