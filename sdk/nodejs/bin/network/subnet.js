"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Subnet(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocationPools"] = state ? state.allocationPools : undefined;
            inputs["cidr"] = state ? state.cidr : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsNameservers"] = state ? state.dnsNameservers : undefined;
            inputs["enableDhcp"] = state ? state.enableDhcp : undefined;
            inputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            inputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            inputs["ipVersion"] = state ? state.ipVersion : undefined;
            inputs["ipv6AddressMode"] = state ? state.ipv6AddressMode : undefined;
            inputs["ipv6RaMode"] = state ? state.ipv6RaMode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["noGateway"] = state ? state.noGateway : undefined;
            inputs["ntpServers"] = state ? state.ntpServers : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.cidr === undefined) {
                throw new Error("Missing required property 'cidr'");
            }
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            inputs["allocationPools"] = args ? args.allocationPools : undefined;
            inputs["cidr"] = args ? args.cidr : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsNameservers"] = args ? args.dnsNameservers : undefined;
            inputs["enableDhcp"] = args ? args.enableDhcp : undefined;
            inputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            inputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            inputs["ipVersion"] = args ? args.ipVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["noGateway"] = args ? args.noGateway : undefined;
            inputs["ntpServers"] = args ? args.ntpServers : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["ipv6AddressMode"] = undefined /*out*/;
            inputs["ipv6RaMode"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("ecl:network/subnet:Subnet", name, inputs, opts);
    }
}
exports.Subnet = Subnet;
//# sourceMappingURL=subnet.js.map