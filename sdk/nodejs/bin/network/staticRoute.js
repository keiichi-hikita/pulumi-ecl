"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
class StaticRoute extends pulumi.CustomResource {
    /**
     * Get an existing StaticRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new StaticRoute(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["awsGwId"] = state ? state.awsGwId : undefined;
            inputs["azureGwId"] = state ? state.azureGwId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["gcpGwId"] = state ? state.gcpGwId : undefined;
            inputs["interdcGwId"] = state ? state.interdcGwId : undefined;
            inputs["internetGwId"] = state ? state.internetGwId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nexthop"] = state ? state.nexthop : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
            inputs["vpnGwId"] = state ? state.vpnGwId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.destination === undefined) {
                throw new Error("Missing required property 'destination'");
            }
            if (!args || args.nexthop === undefined) {
                throw new Error("Missing required property 'nexthop'");
            }
            if (!args || args.serviceType === undefined) {
                throw new Error("Missing required property 'serviceType'");
            }
            inputs["awsGwId"] = args ? args.awsGwId : undefined;
            inputs["azureGwId"] = args ? args.azureGwId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["gcpGwId"] = args ? args.gcpGwId : undefined;
            inputs["interdcGwId"] = args ? args.interdcGwId : undefined;
            inputs["internetGwId"] = args ? args.internetGwId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nexthop"] = args ? args.nexthop : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serviceType"] = args ? args.serviceType : undefined;
            inputs["tenantId"] = args ? args.tenantId : undefined;
            inputs["vpnGwId"] = args ? args.vpnGwId : undefined;
        }
        super("ecl:network/staticRoute:StaticRoute", name, inputs, opts);
    }
}
exports.StaticRoute = StaticRoute;
//# sourceMappingURL=staticRoute.js.map