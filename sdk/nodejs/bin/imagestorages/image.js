"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Image(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["checksum"] = state ? state.checksum : undefined;
            inputs["containerFormat"] = state ? state.containerFormat : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["diskFormat"] = state ? state.diskFormat : undefined;
            inputs["file"] = state ? state.file : undefined;
            inputs["licenseSwitch"] = state ? state.licenseSwitch : undefined;
            inputs["localFilePath"] = state ? state.localFilePath : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["minDiskGb"] = state ? state.minDiskGb : undefined;
            inputs["minRamMb"] = state ? state.minRamMb : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["owner"] = state ? state.owner : undefined;
            inputs["properties"] = state ? state.properties : undefined;
            inputs["protected"] = state ? state.protected : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["schema"] = state ? state.schema : undefined;
            inputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["updateAt"] = state ? state.updateAt : undefined;
            inputs["verifyChecksum"] = state ? state.verifyChecksum : undefined;
            inputs["visibility"] = state ? state.visibility : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.containerFormat === undefined) {
                throw new Error("Missing required property 'containerFormat'");
            }
            if (!args || args.diskFormat === undefined) {
                throw new Error("Missing required property 'diskFormat'");
            }
            if (!args || args.localFilePath === undefined) {
                throw new Error("Missing required property 'localFilePath'");
            }
            inputs["containerFormat"] = args ? args.containerFormat : undefined;
            inputs["diskFormat"] = args ? args.diskFormat : undefined;
            inputs["licenseSwitch"] = args ? args.licenseSwitch : undefined;
            inputs["localFilePath"] = args ? args.localFilePath : undefined;
            inputs["minDiskGb"] = args ? args.minDiskGb : undefined;
            inputs["minRamMb"] = args ? args.minRamMb : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["properties"] = args ? args.properties : undefined;
            inputs["protected"] = args ? args.protected : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["verifyChecksum"] = args ? args.verifyChecksum : undefined;
            inputs["visibility"] = args ? args.visibility : undefined;
            inputs["checksum"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["file"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["schema"] = undefined /*out*/;
            inputs["sizeBytes"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["updateAt"] = undefined /*out*/;
        }
        super("ecl:imagestorages/image:Image", name, inputs, opts);
    }
}
exports.Image = Image;
//# sourceMappingURL=image.js.map