"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
class VirtualStorage extends pulumi.CustomResource {
    /**
     * Get an existing VirtualStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VirtualStorage(name, state, Object.assign({}, opts, { id: id }));
    }
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["errorMessage"] = state ? state.errorMessage : undefined;
            inputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            inputs["ipAddrPool"] = state ? state.ipAddrPool : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["volumeTypeId"] = state ? state.volumeTypeId : undefined;
            inputs["volumeTypeName"] = state ? state.volumeTypeName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.ipAddrPool === undefined) {
                throw new Error("Missing required property 'ipAddrPool'");
            }
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            if (!args || args.subnetId === undefined) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["errorMessage"] = args ? args.errorMessage : undefined;
            inputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            inputs["ipAddrPool"] = args ? args.ipAddrPool : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["volumeTypeId"] = args ? args.volumeTypeId : undefined;
            inputs["volumeTypeName"] = args ? args.volumeTypeName : undefined;
        }
        super("ecl:storage/virtualStorage:VirtualStorage", name, inputs, opts);
    }
}
exports.VirtualStorage = VirtualStorage;
//# sourceMappingURL=virtualStorage.js.map