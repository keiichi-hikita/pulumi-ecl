// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VirtualStorage extends pulumi.CustomResource {
    /**
     * Get an existing VirtualStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualStorageState, opts?: pulumi.CustomResourceOptions): VirtualStorage {
        return new VirtualStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:storage/virtualStorage:VirtualStorage';

    /**
     * Returns true if the given object is an instance of VirtualStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualStorage.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly errorMessage!: pulumi.Output<string>;
    public readonly hostRoutes!: pulumi.Output<{ destination: string, nexthop: string }[] | undefined>;
    public readonly ipAddrPool!: pulumi.Output<{ end: string, start: string }>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly volumeTypeId!: pulumi.Output<string>;
    public readonly volumeTypeName!: pulumi.Output<string | undefined>;

    /**
     * Create a VirtualStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualStorageArgs | VirtualStorageState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VirtualStorageState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["errorMessage"] = state ? state.errorMessage : undefined;
            inputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            inputs["ipAddrPool"] = state ? state.ipAddrPool : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["volumeTypeId"] = state ? state.volumeTypeId : undefined;
            inputs["volumeTypeName"] = state ? state.volumeTypeName : undefined;
        } else {
            const args = argsOrState as VirtualStorageArgs | undefined;
            if (!args || args.ipAddrPool === undefined) {
                throw new Error("Missing required property 'ipAddrPool'");
            }
            if (!args || args.networkId === undefined) {
                throw new Error("Missing required property 'networkId'");
            }
            if (!args || args.subnetId === undefined) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["errorMessage"] = args ? args.errorMessage : undefined;
            inputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            inputs["ipAddrPool"] = args ? args.ipAddrPool : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["volumeTypeId"] = args ? args.volumeTypeId : undefined;
            inputs["volumeTypeName"] = args ? args.volumeTypeName : undefined;
        }
        super(VirtualStorage.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualStorage resources.
 */
export interface VirtualStorageState {
    readonly description?: pulumi.Input<string>;
    readonly errorMessage?: pulumi.Input<string>;
    readonly hostRoutes?: pulumi.Input<pulumi.Input<{ destination: pulumi.Input<string>, nexthop: pulumi.Input<string> }>[]>;
    readonly ipAddrPool?: pulumi.Input<{ end: pulumi.Input<string>, start: pulumi.Input<string> }>;
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<string>;
    readonly subnetId?: pulumi.Input<string>;
    readonly volumeTypeId?: pulumi.Input<string>;
    readonly volumeTypeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualStorage resource.
 */
export interface VirtualStorageArgs {
    readonly description?: pulumi.Input<string>;
    readonly errorMessage?: pulumi.Input<string>;
    readonly hostRoutes?: pulumi.Input<pulumi.Input<{ destination: pulumi.Input<string>, nexthop: pulumi.Input<string> }>[]>;
    readonly ipAddrPool: pulumi.Input<{ end: pulumi.Input<string>, start: pulumi.Input<string> }>;
    readonly name?: pulumi.Input<string>;
    readonly networkId: pulumi.Input<string>;
    readonly subnetId: pulumi.Input<string>;
    readonly volumeTypeId?: pulumi.Input<string>;
    readonly volumeTypeName?: pulumi.Input<string>;
}
