// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    public readonly availabilityZone: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public readonly errorMessage: pulumi.Output<string>;
    public readonly initiatorIqns: pulumi.Output<string[] | undefined>;
    public readonly iopsPerGb: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly size: pulumi.Output<number>;
    public readonly throughput: pulumi.Output<string | undefined>;
    public readonly virtualStorageId: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VolumeState = argsOrState as VolumeState | undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["errorMessage"] = state ? state.errorMessage : undefined;
            inputs["initiatorIqns"] = state ? state.initiatorIqns : undefined;
            inputs["iopsPerGb"] = state ? state.iopsPerGb : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["throughput"] = state ? state.throughput : undefined;
            inputs["virtualStorageId"] = state ? state.virtualStorageId : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            if (!args || args.virtualStorageId === undefined) {
                throw new Error("Missing required property 'virtualStorageId'");
            }
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["errorMessage"] = args ? args.errorMessage : undefined;
            inputs["initiatorIqns"] = args ? args.initiatorIqns : undefined;
            inputs["iopsPerGb"] = args ? args.iopsPerGb : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["throughput"] = args ? args.throughput : undefined;
            inputs["virtualStorageId"] = args ? args.virtualStorageId : undefined;
        }
        super("ecl:storage/volume:Volume", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    readonly availabilityZone?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly errorMessage?: pulumi.Input<string>;
    readonly initiatorIqns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly iopsPerGb?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly throughput?: pulumi.Input<string>;
    readonly virtualStorageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    readonly availabilityZone?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly errorMessage?: pulumi.Input<string>;
    readonly initiatorIqns?: pulumi.Input<pulumi.Input<string>[]>;
    readonly iopsPerGb?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly size: pulumi.Input<number>;
    readonly throughput?: pulumi.Input<string>;
    readonly virtualStorageId: pulumi.Input<string>;
}
