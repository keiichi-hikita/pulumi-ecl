// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:compute/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public /*out*/ readonly accessIpV4!: pulumi.Output<string>;
    public /*out*/ readonly allMetadata!: pulumi.Output<{[key: string]: any}>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly blockDevices!: pulumi.Output<{ bootIndex?: number, deleteOnTermination?: boolean, destinationType?: string, sourceType: string, uuid?: string, volumeSize?: number }[] | undefined>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly flavorName!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<{ accessNetwork?: boolean, fixedIpV4: string, mac: string, name: string, port: string, uuid: string }[]>;
    public readonly powerState!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly stopBeforeDestroy!: pulumi.Output<boolean | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as InstanceState | undefined;
            inputs["accessIpV4"] = state ? state.accessIpV4 : undefined;
            inputs["allMetadata"] = state ? state.allMetadata : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["blockDevices"] = state ? state.blockDevices : undefined;
            inputs["flavorId"] = state ? state.flavorId : undefined;
            inputs["flavorName"] = state ? state.flavorName : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["imageName"] = state ? state.imageName : undefined;
            inputs["keyPair"] = state ? state.keyPair : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networks"] = state ? state.networks : undefined;
            inputs["powerState"] = state ? state.powerState : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["stopBeforeDestroy"] = state ? state.stopBeforeDestroy : undefined;
            inputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["blockDevices"] = args ? args.blockDevices : undefined;
            inputs["flavorId"] = args ? args.flavorId : undefined;
            inputs["flavorName"] = args ? args.flavorName : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["imageName"] = args ? args.imageName : undefined;
            inputs["keyPair"] = args ? args.keyPair : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networks"] = args ? args.networks : undefined;
            inputs["powerState"] = args ? args.powerState : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["stopBeforeDestroy"] = args ? args.stopBeforeDestroy : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["accessIpV4"] = undefined /*out*/;
            inputs["allMetadata"] = undefined /*out*/;
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    readonly accessIpV4?: pulumi.Input<string>;
    readonly allMetadata?: pulumi.Input<{[key: string]: any}>;
    readonly availabilityZone?: pulumi.Input<string>;
    readonly blockDevices?: pulumi.Input<pulumi.Input<{ bootIndex?: pulumi.Input<number>, deleteOnTermination?: pulumi.Input<boolean>, destinationType?: pulumi.Input<string>, sourceType: pulumi.Input<string>, uuid?: pulumi.Input<string>, volumeSize?: pulumi.Input<number> }>[]>;
    readonly flavorId?: pulumi.Input<string>;
    readonly flavorName?: pulumi.Input<string>;
    readonly imageId?: pulumi.Input<string>;
    readonly imageName?: pulumi.Input<string>;
    readonly keyPair?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly networks?: pulumi.Input<pulumi.Input<{ accessNetwork?: pulumi.Input<boolean>, fixedIpV4?: pulumi.Input<string>, mac?: pulumi.Input<string>, name?: pulumi.Input<string>, port?: pulumi.Input<string>, uuid?: pulumi.Input<string> }>[]>;
    readonly powerState?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly stopBeforeDestroy?: pulumi.Input<boolean>;
    readonly userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    readonly availabilityZone?: pulumi.Input<string>;
    readonly blockDevices?: pulumi.Input<pulumi.Input<{ bootIndex?: pulumi.Input<number>, deleteOnTermination?: pulumi.Input<boolean>, destinationType?: pulumi.Input<string>, sourceType: pulumi.Input<string>, uuid?: pulumi.Input<string>, volumeSize?: pulumi.Input<number> }>[]>;
    readonly flavorId?: pulumi.Input<string>;
    readonly flavorName?: pulumi.Input<string>;
    readonly imageId?: pulumi.Input<string>;
    readonly imageName?: pulumi.Input<string>;
    readonly keyPair?: pulumi.Input<string>;
    readonly metadata?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly networks?: pulumi.Input<pulumi.Input<{ accessNetwork?: pulumi.Input<boolean>, fixedIpV4?: pulumi.Input<string>, mac?: pulumi.Input<string>, name?: pulumi.Input<string>, port?: pulumi.Input<string>, uuid?: pulumi.Input<string> }>[]>;
    readonly powerState?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly stopBeforeDestroy?: pulumi.Input<boolean>;
    readonly userData?: pulumi.Input<string>;
}
