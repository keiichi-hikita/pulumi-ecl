// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VolumeAttach extends pulumi.CustomResource {
    /**
     * Get an existing VolumeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeAttachState): VolumeAttach {
        return new VolumeAttach(name, <any>state, { id });
    }

    public readonly device: pulumi.Output<string>;
    public readonly region: pulumi.Output<string>;
    public readonly serverId: pulumi.Output<string>;
    public readonly volumeId: pulumi.Output<string>;

    /**
     * Create a VolumeAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeAttachArgs | VolumeAttachState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VolumeAttachState = argsOrState as VolumeAttachState | undefined;
            inputs["device"] = state ? state.device : undefined;
            inputs["region"] = state ? state.region : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
            inputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as VolumeAttachArgs | undefined;
            if (!args || args.serverId === undefined) {
                throw new Error("Missing required property 'serverId'");
            }
            if (!args || args.volumeId === undefined) {
                throw new Error("Missing required property 'volumeId'");
            }
            inputs["device"] = args ? args.device : undefined;
            inputs["region"] = args ? args.region : undefined;
            inputs["serverId"] = args ? args.serverId : undefined;
            inputs["volumeId"] = args ? args.volumeId : undefined;
        }
        super("ecl:compute/volumeAttach:VolumeAttach", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeAttach resources.
 */
export interface VolumeAttachState {
    readonly device?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly serverId?: pulumi.Input<string>;
    readonly volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeAttach resource.
 */
export interface VolumeAttachArgs {
    readonly device?: pulumi.Input<string>;
    readonly region?: pulumi.Input<string>;
    readonly serverId: pulumi.Input<string>;
    readonly volumeId: pulumi.Input<string>;
}
