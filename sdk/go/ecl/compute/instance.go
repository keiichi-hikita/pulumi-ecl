// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 VM instance resource within Enterprise Cloud.
type Instance struct {
	s *pulumi.ResourceState
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessIpV4"] = nil
		inputs["availabilityZone"] = nil
		inputs["blockDevices"] = nil
		inputs["flavorId"] = nil
		inputs["flavorName"] = nil
		inputs["imageId"] = nil
		inputs["imageName"] = nil
		inputs["keyPair"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["networks"] = nil
		inputs["powerState"] = nil
		inputs["region"] = nil
		inputs["stopBeforeDestroy"] = nil
		inputs["userData"] = nil
	} else {
		inputs["accessIpV4"] = args.AccessIpV4
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["blockDevices"] = args.BlockDevices
		inputs["flavorId"] = args.FlavorId
		inputs["flavorName"] = args.FlavorName
		inputs["imageId"] = args.ImageId
		inputs["imageName"] = args.ImageName
		inputs["keyPair"] = args.KeyPair
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["networks"] = args.Networks
		inputs["powerState"] = args.PowerState
		inputs["region"] = args.Region
		inputs["stopBeforeDestroy"] = args.StopBeforeDestroy
		inputs["userData"] = args.UserData
	}
	inputs["allMetadata"] = nil
	s, err := ctx.RegisterResource("ecl:compute/instance:Instance", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *InstanceState, opts ...pulumi.ResourceOpt) (*Instance, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessIpV4"] = state.AccessIpV4
		inputs["allMetadata"] = state.AllMetadata
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["blockDevices"] = state.BlockDevices
		inputs["flavorId"] = state.FlavorId
		inputs["flavorName"] = state.FlavorName
		inputs["imageId"] = state.ImageId
		inputs["imageName"] = state.ImageName
		inputs["keyPair"] = state.KeyPair
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["networks"] = state.Networks
		inputs["powerState"] = state.PowerState
		inputs["region"] = state.Region
		inputs["stopBeforeDestroy"] = state.StopBeforeDestroy
		inputs["userData"] = state.UserData
	}
	s, err := ctx.ReadResource("ecl:compute/instance:Instance", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Instance{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Instance) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Instance) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The first detected Fixed IPv4 address _or_ the
// Floating IP.
func (r *Instance) AccessIpV4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessIpV4"])
}

// Contains all instance metadata, even metadata not set
// by Terraform.
func (r *Instance) AllMetadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["allMetadata"])
}

// The availability zone in which to create
// the server. Changing this creates a new server.
func (r *Instance) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

// Configuration of block devices. The block_device
// structure is documented below. Changing this creates a new server.
// You can specify multiple block devices which will create an instance with
// multiple disks. This configuration is very flexible, so please see the
// following [reference](http://docs.openstack.org/developer/nova/block_device_mapping.html)
// for more information.
func (r *Instance) BlockDevices() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["blockDevices"])
}

// The flavor ID of
// the desired flavor for the server. Changing this resizes the existing server.
func (r *Instance) FlavorId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["flavorId"])
}

// The name of the
// desired flavor for the server. Changing this resizes the existing server.
func (r *Instance) FlavorName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["flavorName"])
}

// (Optional; Required if `image_name` is empty and not booting
// from a volume. Do not specify if booting from a volume.) The image ID of
// the desired image for the server. Changing this creates a new server.
func (r *Instance) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// (Optional; Required if `image_id` is empty and not booting
// from a volume. Do not specify if booting from a volume.) The name of the
// desired image for the server. Changing this creates a new server.
func (r *Instance) ImageName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageName"])
}

// The name of a key pair to put on the server. The key
// pair must already be created and associated with the tenant's account.
// Changing this creates a new server.
func (r *Instance) KeyPair() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keyPair"])
}

// Metadata key/value pairs to make available from
// within the instance. Changing this updates the existing server metadata.
func (r *Instance) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

// A unique name for the resource.
func (r *Instance) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// An array of one or more networks to attach to the
// instance. The network object structure is documented below. Changing this
// creates a new server.
func (r *Instance) Networks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["networks"])
}

// Provide the VM state. Only 'active' and 'shutoff'
// are supported values. *Note*: If the initial power_state is the shutoff
// the VM will be stopped immediately after build and the provisioners like
// remote-exec or files are not supported.
func (r *Instance) PowerState() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["powerState"])
}

// The region in which to create the server instance. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new server.
func (r *Instance) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Whether to try stop instance gracefully
// before destroying it, thus giving chance for guest OS daemons to stop correctly.
// If instance doesn't stop within timeout, it will be destroyed anyway.
func (r *Instance) StopBeforeDestroy() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["stopBeforeDestroy"])
}

// The user data to provide when launching the instance.
// Changing this creates a new server.
func (r *Instance) UserData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userData"])
}

// Input properties used for looking up and filtering Instance resources.
type InstanceState struct {
	// The first detected Fixed IPv4 address _or_ the
	// Floating IP.
	AccessIpV4 interface{}
	// Contains all instance metadata, even metadata not set
	// by Terraform.
	AllMetadata interface{}
	// The availability zone in which to create
	// the server. Changing this creates a new server.
	AvailabilityZone interface{}
	// Configuration of block devices. The block_device
	// structure is documented below. Changing this creates a new server.
	// You can specify multiple block devices which will create an instance with
	// multiple disks. This configuration is very flexible, so please see the
	// following [reference](http://docs.openstack.org/developer/nova/block_device_mapping.html)
	// for more information.
	BlockDevices interface{}
	// The flavor ID of
	// the desired flavor for the server. Changing this resizes the existing server.
	FlavorId interface{}
	// The name of the
	// desired flavor for the server. Changing this resizes the existing server.
	FlavorName interface{}
	// (Optional; Required if `image_name` is empty and not booting
	// from a volume. Do not specify if booting from a volume.) The image ID of
	// the desired image for the server. Changing this creates a new server.
	ImageId interface{}
	// (Optional; Required if `image_id` is empty and not booting
	// from a volume. Do not specify if booting from a volume.) The name of the
	// desired image for the server. Changing this creates a new server.
	ImageName interface{}
	// The name of a key pair to put on the server. The key
	// pair must already be created and associated with the tenant's account.
	// Changing this creates a new server.
	KeyPair interface{}
	// Metadata key/value pairs to make available from
	// within the instance. Changing this updates the existing server metadata.
	Metadata interface{}
	// A unique name for the resource.
	Name interface{}
	// An array of one or more networks to attach to the
	// instance. The network object structure is documented below. Changing this
	// creates a new server.
	Networks interface{}
	// Provide the VM state. Only 'active' and 'shutoff'
	// are supported values. *Note*: If the initial power_state is the shutoff
	// the VM will be stopped immediately after build and the provisioners like
	// remote-exec or files are not supported.
	PowerState interface{}
	// The region in which to create the server instance. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new server.
	Region interface{}
	// Whether to try stop instance gracefully
	// before destroying it, thus giving chance for guest OS daemons to stop correctly.
	// If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy interface{}
	// The user data to provide when launching the instance.
	// Changing this creates a new server.
	UserData interface{}
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The first detected Fixed IPv4 address _or_ the
	// Floating IP.
	AccessIpV4 interface{}
	// The availability zone in which to create
	// the server. Changing this creates a new server.
	AvailabilityZone interface{}
	// Configuration of block devices. The block_device
	// structure is documented below. Changing this creates a new server.
	// You can specify multiple block devices which will create an instance with
	// multiple disks. This configuration is very flexible, so please see the
	// following [reference](http://docs.openstack.org/developer/nova/block_device_mapping.html)
	// for more information.
	BlockDevices interface{}
	// The flavor ID of
	// the desired flavor for the server. Changing this resizes the existing server.
	FlavorId interface{}
	// The name of the
	// desired flavor for the server. Changing this resizes the existing server.
	FlavorName interface{}
	// (Optional; Required if `image_name` is empty and not booting
	// from a volume. Do not specify if booting from a volume.) The image ID of
	// the desired image for the server. Changing this creates a new server.
	ImageId interface{}
	// (Optional; Required if `image_id` is empty and not booting
	// from a volume. Do not specify if booting from a volume.) The name of the
	// desired image for the server. Changing this creates a new server.
	ImageName interface{}
	// The name of a key pair to put on the server. The key
	// pair must already be created and associated with the tenant's account.
	// Changing this creates a new server.
	KeyPair interface{}
	// Metadata key/value pairs to make available from
	// within the instance. Changing this updates the existing server metadata.
	Metadata interface{}
	// A unique name for the resource.
	Name interface{}
	// An array of one or more networks to attach to the
	// instance. The network object structure is documented below. Changing this
	// creates a new server.
	Networks interface{}
	// Provide the VM state. Only 'active' and 'shutoff'
	// are supported values. *Note*: If the initial power_state is the shutoff
	// the VM will be stopped immediately after build and the provisioners like
	// remote-exec or files are not supported.
	PowerState interface{}
	// The region in which to create the server instance. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new server.
	Region interface{}
	// Whether to try stop instance gracefully
	// before destroying it, thus giving chance for guest OS daemons to stop correctly.
	// If instance doesn't stop within timeout, it will be destroyed anyway.
	StopBeforeDestroy interface{}
	// The user data to provide when launching the instance.
	// Changing this creates a new server.
	UserData interface{}
}
