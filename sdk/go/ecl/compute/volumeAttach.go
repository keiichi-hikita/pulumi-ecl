// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type VolumeAttach struct {
	s *pulumi.ResourceState
}

// NewVolumeAttach registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttach(ctx *pulumi.Context,
	name string, args *VolumeAttachArgs, opts ...pulumi.ResourceOpt) (*VolumeAttach, error) {
	if args == nil || args.ServerId == nil {
		return nil, errors.New("missing required argument 'ServerId'")
	}
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["device"] = nil
		inputs["region"] = nil
		inputs["serverId"] = nil
		inputs["volumeId"] = nil
	} else {
		inputs["device"] = args.Device
		inputs["region"] = args.Region
		inputs["serverId"] = args.ServerId
		inputs["volumeId"] = args.VolumeId
	}
	s, err := ctx.RegisterResource("ecl:compute/volumeAttach:VolumeAttach", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttach{s: s}, nil
}

// GetVolumeAttach gets an existing VolumeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttach(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeAttachState, opts ...pulumi.ResourceOpt) (*VolumeAttach, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["device"] = state.Device
		inputs["region"] = state.Region
		inputs["serverId"] = state.ServerId
		inputs["volumeId"] = state.VolumeId
	}
	s, err := ctx.ReadResource("ecl:compute/volumeAttach:VolumeAttach", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttach{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VolumeAttach) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VolumeAttach) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *VolumeAttach) Device() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["device"])
}

func (r *VolumeAttach) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *VolumeAttach) ServerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverId"])
}

func (r *VolumeAttach) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// Input properties used for looking up and filtering VolumeAttach resources.
type VolumeAttachState struct {
	Device interface{}
	Region interface{}
	ServerId interface{}
	VolumeId interface{}
}

// The set of arguments for constructing a VolumeAttach resource.
type VolumeAttachArgs struct {
	Device interface{}
	Region interface{}
	ServerId interface{}
	VolumeId interface{}
}
