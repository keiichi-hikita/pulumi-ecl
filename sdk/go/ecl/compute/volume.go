// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZone"] = nil
		inputs["description"] = nil
		inputs["imageId"] = nil
		inputs["metadata"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["size"] = nil
		inputs["sourceReplica"] = nil
		inputs["volumeType"] = nil
	} else {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["description"] = args.Description
		inputs["imageId"] = args.ImageId
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["size"] = args.Size
		inputs["sourceReplica"] = args.SourceReplica
		inputs["volumeType"] = args.VolumeType
	}
	inputs["attachments"] = nil
	s, err := ctx.RegisterResource("ecl:compute/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["attachments"] = state.Attachments
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["description"] = state.Description
		inputs["imageId"] = state.ImageId
		inputs["metadata"] = state.Metadata
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["size"] = state.Size
		inputs["sourceReplica"] = state.SourceReplica
		inputs["volumeType"] = state.VolumeType
	}
	s, err := ctx.ReadResource("ecl:compute/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Volume) Attachments() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["attachments"])
}

func (r *Volume) AvailabilityZone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["availabilityZone"])
}

func (r *Volume) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Volume) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

func (r *Volume) Metadata() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["metadata"])
}

func (r *Volume) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Volume) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *Volume) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

func (r *Volume) SourceReplica() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceReplica"])
}

func (r *Volume) VolumeType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeType"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	Attachments interface{}
	AvailabilityZone interface{}
	Description interface{}
	ImageId interface{}
	Metadata interface{}
	Name interface{}
	Region interface{}
	Size interface{}
	SourceReplica interface{}
	VolumeType interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	AvailabilityZone interface{}
	Description interface{}
	ImageId interface{}
	Metadata interface{}
	Name interface{}
	Region interface{}
	Size interface{}
	SourceReplica interface{}
	VolumeType interface{}
}
