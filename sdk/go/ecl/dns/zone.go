// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 zone resource of Enterprise Cloud.
type Zone struct {
	s *pulumi.ResourceState
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOpt) (*Zone, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["email"] = nil
		inputs["masters"] = nil
		inputs["name"] = nil
		inputs["ttl"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["email"] = args.Email
		inputs["masters"] = args.Masters
		inputs["name"] = args.Name
		inputs["ttl"] = args.Ttl
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("ecl:dns/zone:Zone", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Zone{s: s}, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ZoneState, opts ...pulumi.ResourceOpt) (*Zone, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["email"] = state.Email
		inputs["masters"] = state.Masters
		inputs["name"] = state.Name
		inputs["ttl"] = state.Ttl
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("ecl:dns/zone:Zone", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Zone{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Zone) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Zone) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Description for this zone.
func (r *Zone) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// E-mail for the zone.
// Used in SOA records for the zone.
// This parameter is not currently supported.
// Even if you set this parameter, it will be ignored.
func (r *Zone) Email() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["email"])
}

// For secondary zones. 
// The servers to slave from to get DNS information.
func (r *Zone) Masters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["masters"])
}

// DNS Name for the zone.
func (r *Zone) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// TTL (Time to Live) for the zone.
// This parameter is not currently supported.
// Even if you set this parameter, it will be ignored.
func (r *Zone) Ttl() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ttl"])
}

// Type of zone.
// PRIMARY is controlled by ECL2.0 DNS,
// SECONDARY zones are slaved from another DNS Server.
// Defaults to PRIMARY.
// This parameter is not currently supported.
// Even if you set this parameter, it will be ignored.
func (r *Zone) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Zone resources.
type ZoneState struct {
	// Description for this zone.
	Description interface{}
	// E-mail for the zone.
	// Used in SOA records for the zone.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Email interface{}
	// For secondary zones. 
	// The servers to slave from to get DNS information.
	Masters interface{}
	// DNS Name for the zone.
	Name interface{}
	// TTL (Time to Live) for the zone.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Ttl interface{}
	// Type of zone.
	// PRIMARY is controlled by ECL2.0 DNS,
	// SECONDARY zones are slaved from another DNS Server.
	// Defaults to PRIMARY.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Type interface{}
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// Description for this zone.
	Description interface{}
	// E-mail for the zone.
	// Used in SOA records for the zone.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Email interface{}
	// For secondary zones. 
	// The servers to slave from to get DNS information.
	Masters interface{}
	// DNS Name for the zone.
	Name interface{}
	// TTL (Time to Live) for the zone.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Ttl interface{}
	// Type of zone.
	// PRIMARY is controlled by ECL2.0 DNS,
	// SECONDARY zones are slaved from another DNS Server.
	// Defaults to PRIMARY.
	// This parameter is not currently supported.
	// Even if you set this parameter, it will be ignored.
	Type interface{}
}
