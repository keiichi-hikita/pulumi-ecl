// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type VirtualStorage struct {
	s *pulumi.ResourceState
}

// NewVirtualStorage registers a new resource with the given unique name, arguments, and options.
func NewVirtualStorage(ctx *pulumi.Context,
	name string, args *VirtualStorageArgs, opts ...pulumi.ResourceOpt) (*VirtualStorage, error) {
	if args == nil || args.IpAddrPool == nil {
		return nil, errors.New("missing required argument 'IpAddrPool'")
	}
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["errorMessage"] = nil
		inputs["hostRoutes"] = nil
		inputs["ipAddrPool"] = nil
		inputs["name"] = nil
		inputs["networkId"] = nil
		inputs["subnetId"] = nil
		inputs["volumeTypeId"] = nil
		inputs["volumeTypeName"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["errorMessage"] = args.ErrorMessage
		inputs["hostRoutes"] = args.HostRoutes
		inputs["ipAddrPool"] = args.IpAddrPool
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["subnetId"] = args.SubnetId
		inputs["volumeTypeId"] = args.VolumeTypeId
		inputs["volumeTypeName"] = args.VolumeTypeName
	}
	s, err := ctx.RegisterResource("ecl:storage/virtualStorage:VirtualStorage", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualStorage{s: s}, nil
}

// GetVirtualStorage gets an existing VirtualStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualStorage(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VirtualStorageState, opts ...pulumi.ResourceOpt) (*VirtualStorage, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["errorMessage"] = state.ErrorMessage
		inputs["hostRoutes"] = state.HostRoutes
		inputs["ipAddrPool"] = state.IpAddrPool
		inputs["name"] = state.Name
		inputs["networkId"] = state.NetworkId
		inputs["subnetId"] = state.SubnetId
		inputs["volumeTypeId"] = state.VolumeTypeId
		inputs["volumeTypeName"] = state.VolumeTypeName
	}
	s, err := ctx.ReadResource("ecl:storage/virtualStorage:VirtualStorage", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualStorage{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VirtualStorage) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VirtualStorage) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *VirtualStorage) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *VirtualStorage) ErrorMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["errorMessage"])
}

func (r *VirtualStorage) HostRoutes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["hostRoutes"])
}

func (r *VirtualStorage) IpAddrPool() *pulumi.Output {
	return r.s.State["ipAddrPool"]
}

func (r *VirtualStorage) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *VirtualStorage) NetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkId"])
}

func (r *VirtualStorage) SubnetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetId"])
}

func (r *VirtualStorage) VolumeTypeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeTypeId"])
}

func (r *VirtualStorage) VolumeTypeName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeTypeName"])
}

// Input properties used for looking up and filtering VirtualStorage resources.
type VirtualStorageState struct {
	Description interface{}
	ErrorMessage interface{}
	HostRoutes interface{}
	IpAddrPool interface{}
	Name interface{}
	NetworkId interface{}
	SubnetId interface{}
	VolumeTypeId interface{}
	VolumeTypeName interface{}
}

// The set of arguments for constructing a VirtualStorage resource.
type VirtualStorageArgs struct {
	Description interface{}
	ErrorMessage interface{}
	HostRoutes interface{}
	IpAddrPool interface{}
	Name interface{}
	NetworkId interface{}
	SubnetId interface{}
	VolumeTypeId interface{}
	VolumeTypeName interface{}
}
