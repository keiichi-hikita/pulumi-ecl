// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package imagestorages

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Image member resource within Enterprise Cloud.
type ImageMember struct {
	s *pulumi.ResourceState
}

// NewImageMember registers a new resource with the given unique name, arguments, and options.
func NewImageMember(ctx *pulumi.Context,
	name string, args *ImageMemberArgs, opts ...pulumi.ResourceOpt) (*ImageMember, error) {
	if args == nil || args.ImageId == nil {
		return nil, errors.New("missing required argument 'ImageId'")
	}
	if args == nil || args.MemberId == nil {
		return nil, errors.New("missing required argument 'MemberId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["imageId"] = nil
		inputs["memberId"] = nil
		inputs["region"] = nil
	} else {
		inputs["imageId"] = args.ImageId
		inputs["memberId"] = args.MemberId
		inputs["region"] = args.Region
	}
	inputs["createdAt"] = nil
	inputs["schema"] = nil
	inputs["status"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("ecl:imagestorages/imageMember:ImageMember", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageMember{s: s}, nil
}

// GetImageMember gets an existing ImageMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageMember(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageMemberState, opts ...pulumi.ResourceOpt) (*ImageMember, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdAt"] = state.CreatedAt
		inputs["imageId"] = state.ImageId
		inputs["memberId"] = state.MemberId
		inputs["region"] = state.Region
		inputs["schema"] = state.Schema
		inputs["status"] = state.Status
		inputs["updatedAt"] = state.UpdatedAt
	}
	s, err := ctx.ReadResource("ecl:imagestorages/imageMember:ImageMember", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageMember{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ImageMember) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ImageMember) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Date and time of image member creation.
func (r *ImageMember) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// An identifier for the image.
func (r *ImageMember) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// An identifier for the image member (projectID).
func (r *ImageMember) MemberId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["memberId"])
}

// The region in which to obtain the V2 Imagestorage client.
// Images are associated with accounts, but a Imagestroage client is needed to
// create one. If omitted, the `region` argument of the provider is used.
// Changing this creates a new image.
func (r *ImageMember) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// URL for schema of the member.
func (r *ImageMember) Schema() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schema"])
}

// The status of this image member.
func (r *ImageMember) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Date and time of last modification of image member.
func (r *ImageMember) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Input properties used for looking up and filtering ImageMember resources.
type ImageMemberState struct {
	// Date and time of image member creation.
	CreatedAt interface{}
	// An identifier for the image.
	ImageId interface{}
	// An identifier for the image member (projectID).
	MemberId interface{}
	// The region in which to obtain the V2 Imagestorage client.
	// Images are associated with accounts, but a Imagestroage client is needed to
	// create one. If omitted, the `region` argument of the provider is used.
	// Changing this creates a new image.
	Region interface{}
	// URL for schema of the member.
	Schema interface{}
	// The status of this image member.
	Status interface{}
	// Date and time of last modification of image member.
	UpdatedAt interface{}
}

// The set of arguments for constructing a ImageMember resource.
type ImageMemberArgs struct {
	// An identifier for the image.
	ImageId interface{}
	// An identifier for the image member (projectID).
	MemberId interface{}
	// The region in which to obtain the V2 Imagestorage client.
	// Images are associated with accounts, but a Imagestroage client is needed to
	// create one. If omitted, the `region` argument of the provider is used.
	// Changing this creates a new image.
	Region interface{}
}
