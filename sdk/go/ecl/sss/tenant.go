// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sss

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 tenant resource within Enterprise Cloud.
type Tenant struct {
	s *pulumi.ResourceState
}

// NewTenant registers a new resource with the given unique name, arguments, and options.
func NewTenant(ctx *pulumi.Context,
	name string, args *TenantArgs, opts ...pulumi.ResourceOpt) (*Tenant, error) {
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	if args == nil || args.TenantName == nil {
		return nil, errors.New("missing required argument 'TenantName'")
	}
	if args == nil || args.TenantRegion == nil {
		return nil, errors.New("missing required argument 'TenantRegion'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["contractId"] = nil
		inputs["description"] = nil
		inputs["tenantName"] = nil
		inputs["tenantRegion"] = nil
	} else {
		inputs["contractId"] = args.ContractId
		inputs["description"] = args.Description
		inputs["tenantName"] = args.TenantName
		inputs["tenantRegion"] = args.TenantRegion
	}
	inputs["startTime"] = nil
	inputs["tenantId"] = nil
	s, err := ctx.RegisterResource("ecl:sss/tenant:Tenant", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tenant{s: s}, nil
}

// GetTenant gets an existing Tenant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTenant(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TenantState, opts ...pulumi.ResourceOpt) (*Tenant, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["contractId"] = state.ContractId
		inputs["description"] = state.Description
		inputs["startTime"] = state.StartTime
		inputs["tenantId"] = state.TenantId
		inputs["tenantName"] = state.TenantName
		inputs["tenantRegion"] = state.TenantRegion
	}
	s, err := ctx.ReadResource("ecl:sss/tenant:Tenant", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Tenant{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Tenant) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Tenant) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Contract which new tenant belongs to.
// If this parameter is not designated, API user's contract
// implicitly designated.
func (r *Tenant) ContractId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contractId"])
}

// Description for this tenant.
func (r *Tenant) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Tenant created time.
func (r *Tenant) StartTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["startTime"])
}

// ID of the tenant.
func (r *Tenant) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Name of new tenant.
// This name need to be unique globally.
func (r *Tenant) TenantName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantName"])
}

// Region this tenant belongs to.
func (r *Tenant) TenantRegion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantRegion"])
}

// Input properties used for looking up and filtering Tenant resources.
type TenantState struct {
	// Contract which new tenant belongs to.
	// If this parameter is not designated, API user's contract
	// implicitly designated.
	ContractId interface{}
	// Description for this tenant.
	Description interface{}
	// Tenant created time.
	StartTime interface{}
	// ID of the tenant.
	TenantId interface{}
	// Name of new tenant.
	// This name need to be unique globally.
	TenantName interface{}
	// Region this tenant belongs to.
	TenantRegion interface{}
}

// The set of arguments for constructing a Tenant resource.
type TenantArgs struct {
	// Contract which new tenant belongs to.
	// If this parameter is not designated, API user's contract
	// implicitly designated.
	ContractId interface{}
	// Description for this tenant.
	Description interface{}
	// Name of new tenant.
	// This name need to be unique globally.
	TenantName interface{}
	// Region this tenant belongs to.
	TenantRegion interface{}
}
