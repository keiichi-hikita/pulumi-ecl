// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sss

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 user resource within Enterprise Cloud.
type User struct {
	s *pulumi.ResourceState
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOpt) (*User, error) {
	if args == nil || args.LoginId == nil {
		return nil, errors.New("missing required argument 'LoginId'")
	}
	if args == nil || args.MailAddress == nil {
		return nil, errors.New("missing required argument 'MailAddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["loginId"] = nil
		inputs["mailAddress"] = nil
		inputs["notifyPassword"] = nil
		inputs["password"] = nil
	} else {
		inputs["loginId"] = args.LoginId
		inputs["mailAddress"] = args.MailAddress
		inputs["notifyPassword"] = args.NotifyPassword
		inputs["password"] = args.Password
	}
	inputs["brandId"] = nil
	inputs["contractId"] = nil
	inputs["contractOwner"] = nil
	inputs["externalReferenceId"] = nil
	inputs["keystoneEndpoint"] = nil
	inputs["keystoneName"] = nil
	inputs["keystonePassword"] = nil
	inputs["loginIntegration"] = nil
	inputs["sssEndpoint"] = nil
	inputs["startTime"] = nil
	inputs["userId"] = nil
	s, err := ctx.RegisterResource("ecl:sss/user:User", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserState, opts ...pulumi.ResourceOpt) (*User, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["brandId"] = state.BrandId
		inputs["contractId"] = state.ContractId
		inputs["contractOwner"] = state.ContractOwner
		inputs["externalReferenceId"] = state.ExternalReferenceId
		inputs["keystoneEndpoint"] = state.KeystoneEndpoint
		inputs["keystoneName"] = state.KeystoneName
		inputs["keystonePassword"] = state.KeystonePassword
		inputs["loginId"] = state.LoginId
		inputs["loginIntegration"] = state.LoginIntegration
		inputs["mailAddress"] = state.MailAddress
		inputs["notifyPassword"] = state.NotifyPassword
		inputs["password"] = state.Password
		inputs["sssEndpoint"] = state.SssEndpoint
		inputs["startTime"] = state.StartTime
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("ecl:sss/user:User", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &User{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *User) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *User) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Brand ID which this user belongs. (ex. ecl2)
func (r *User) BrandId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["brandId"])
}

// Contract ID which this user belongs.
// Contract id format is econ[0-9]{10}
func (r *User) ContractId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contractId"])
}

// If this user is the Super user in this contract, true. If not, false
func (r *User) ContractOwner() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["contractOwner"])
}

// External system oriented contract id.
// If this user's contract is NTT Communications, customer number with 15 numbers will be shown
func (r *User) ExternalReferenceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["externalReferenceId"])
}

// Keystone address this user can use to get token for SSS API request
func (r *User) KeystoneEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keystoneEndpoint"])
}

// This user’s API key for keystone authentication
func (r *User) KeystoneName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keystoneName"])
}

// This user’s API secret for keystone authentication
func (r *User) KeystonePassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keystonePassword"])
}

// Login id of new user.
func (r *User) LoginId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loginId"])
}

// If this user's contract is tied with
// NTT Communications business portal, 'icp' is shown
func (r *User) LoginIntegration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loginIntegration"])
}

// Mail address of new user.
func (r *User) MailAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mailAddress"])
}

// If this flag is set 'true', 
// notification email will be sent to new user's email address.
// Even this parameter is optional, you must specify this in case "Creation".
func (r *User) NotifyPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notifyPassword"])
}

// Initial password of new user.
// If this parameter is not designated,
// random initial password is generated and applied to new user.
func (r *User) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// SSS endpoint recommended for this user
func (r *User) SssEndpoint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sssEndpoint"])
}

// Created time of user.
func (r *User) StartTime() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["startTime"])
}

// login id of the user.
// When this contract is tied with icp, this parameter is fixed {email}_{user_id}
func (r *User) UserId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering User resources.
type UserState struct {
	// Brand ID which this user belongs. (ex. ecl2)
	BrandId interface{}
	// Contract ID which this user belongs.
	// Contract id format is econ[0-9]{10}
	ContractId interface{}
	// If this user is the Super user in this contract, true. If not, false
	ContractOwner interface{}
	// External system oriented contract id.
	// If this user's contract is NTT Communications, customer number with 15 numbers will be shown
	ExternalReferenceId interface{}
	// Keystone address this user can use to get token for SSS API request
	KeystoneEndpoint interface{}
	// This user’s API key for keystone authentication
	KeystoneName interface{}
	// This user’s API secret for keystone authentication
	KeystonePassword interface{}
	// Login id of new user.
	LoginId interface{}
	// If this user's contract is tied with
	// NTT Communications business portal, 'icp' is shown
	LoginIntegration interface{}
	// Mail address of new user.
	MailAddress interface{}
	// If this flag is set 'true', 
	// notification email will be sent to new user's email address.
	// Even this parameter is optional, you must specify this in case "Creation".
	NotifyPassword interface{}
	// Initial password of new user.
	// If this parameter is not designated,
	// random initial password is generated and applied to new user.
	Password interface{}
	// SSS endpoint recommended for this user
	SssEndpoint interface{}
	// Created time of user.
	StartTime interface{}
	// login id of the user.
	// When this contract is tied with icp, this parameter is fixed {email}_{user_id}
	UserId interface{}
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Login id of new user.
	LoginId interface{}
	// Mail address of new user.
	MailAddress interface{}
	// If this flag is set 'true', 
	// notification email will be sent to new user's email address.
	// Even this parameter is optional, you must specify this in case "Creation".
	NotifyPassword interface{}
	// Initial password of new user.
	// If this parameter is not designated,
	// random initial password is generated and applied to new user.
	Password interface{}
}
