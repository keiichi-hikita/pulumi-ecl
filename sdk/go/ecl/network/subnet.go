// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.Cidr == nil {
		return nil, errors.New("missing required argument 'Cidr'")
	}
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allocationPools"] = nil
		inputs["cidr"] = nil
		inputs["description"] = nil
		inputs["dnsNameservers"] = nil
		inputs["enableDhcp"] = nil
		inputs["gatewayIp"] = nil
		inputs["hostRoutes"] = nil
		inputs["ipVersion"] = nil
		inputs["ipv6AddressMode"] = nil
		inputs["ipv6RaMode"] = nil
		inputs["name"] = nil
		inputs["networkId"] = nil
		inputs["noGateway"] = nil
		inputs["ntpServers"] = nil
		inputs["status"] = nil
		inputs["tags"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["allocationPools"] = args.AllocationPools
		inputs["cidr"] = args.Cidr
		inputs["description"] = args.Description
		inputs["dnsNameservers"] = args.DnsNameservers
		inputs["enableDhcp"] = args.EnableDhcp
		inputs["gatewayIp"] = args.GatewayIp
		inputs["hostRoutes"] = args.HostRoutes
		inputs["ipVersion"] = args.IpVersion
		inputs["ipv6AddressMode"] = args.Ipv6AddressMode
		inputs["ipv6RaMode"] = args.Ipv6RaMode
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["noGateway"] = args.NoGateway
		inputs["ntpServers"] = args.NtpServers
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("ecl:network/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allocationPools"] = state.AllocationPools
		inputs["cidr"] = state.Cidr
		inputs["description"] = state.Description
		inputs["dnsNameservers"] = state.DnsNameservers
		inputs["enableDhcp"] = state.EnableDhcp
		inputs["gatewayIp"] = state.GatewayIp
		inputs["hostRoutes"] = state.HostRoutes
		inputs["ipVersion"] = state.IpVersion
		inputs["ipv6AddressMode"] = state.Ipv6AddressMode
		inputs["ipv6RaMode"] = state.Ipv6RaMode
		inputs["name"] = state.Name
		inputs["networkId"] = state.NetworkId
		inputs["noGateway"] = state.NoGateway
		inputs["ntpServers"] = state.NtpServers
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("ecl:network/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Subnet) AllocationPools() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allocationPools"])
}

func (r *Subnet) Cidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidr"])
}

func (r *Subnet) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Subnet) DnsNameservers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dnsNameservers"])
}

func (r *Subnet) EnableDhcp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableDhcp"])
}

func (r *Subnet) GatewayIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gatewayIp"])
}

func (r *Subnet) HostRoutes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["hostRoutes"])
}

func (r *Subnet) IpVersion() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ipVersion"])
}

func (r *Subnet) Ipv6AddressMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6AddressMode"])
}

func (r *Subnet) Ipv6RaMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6RaMode"])
}

func (r *Subnet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Subnet) NetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkId"])
}

func (r *Subnet) NoGateway() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["noGateway"])
}

func (r *Subnet) NtpServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ntpServers"])
}

func (r *Subnet) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

func (r *Subnet) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

func (r *Subnet) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	AllocationPools interface{}
	Cidr interface{}
	Description interface{}
	DnsNameservers interface{}
	EnableDhcp interface{}
	GatewayIp interface{}
	HostRoutes interface{}
	IpVersion interface{}
	Ipv6AddressMode interface{}
	Ipv6RaMode interface{}
	Name interface{}
	NetworkId interface{}
	NoGateway interface{}
	NtpServers interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AllocationPools interface{}
	Cidr interface{}
	Description interface{}
	DnsNameservers interface{}
	EnableDhcp interface{}
	GatewayIp interface{}
	HostRoutes interface{}
	IpVersion interface{}
	Ipv6AddressMode interface{}
	Ipv6RaMode interface{}
	Name interface{}
	NetworkId interface{}
	NoGateway interface{}
	NtpServers interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
}
