// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get the ID of an available Enterprise Cloud port.
func LookupPort(ctx *pulumi.Context, args *GetPortArgs) (*GetPortResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["description"] = args.Description
		inputs["deviceId"] = args.DeviceId
		inputs["deviceOwner"] = args.DeviceOwner
		inputs["macAddress"] = args.MacAddress
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["portId"] = args.PortId
		inputs["region"] = args.Region
		inputs["segmentationId"] = args.SegmentationId
		inputs["segmentationType"] = args.SegmentationType
	}
	outputs, err := ctx.Invoke("ecl:network/getPort:getPort", inputs)
	if err != nil {
		return nil, err
	}
	return &GetPortResult{
		AdminStateUp: outputs["adminStateUp"],
		AllFixedIps: outputs["allFixedIps"],
		AllowedAddressPairs: outputs["allowedAddressPairs"],
		Description: outputs["description"],
		DeviceId: outputs["deviceId"],
		DeviceOwner: outputs["deviceOwner"],
		FixedIps: outputs["fixedIps"],
		MacAddress: outputs["macAddress"],
		ManagedByService: outputs["managedByService"],
		Name: outputs["name"],
		NetworkId: outputs["networkId"],
		PortId: outputs["portId"],
		Region: outputs["region"],
		SegmentationId: outputs["segmentationId"],
		SegmentationType: outputs["segmentationType"],
		Status: outputs["status"],
		Tags: outputs["tags"],
		TenantId: outputs["tenantId"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getPort.
type GetPortArgs struct {
	// Port description.
	Description interface{}
	// The Id of device (i.e physical port id for bare-metal).
	DeviceId interface{}
	// The name of the port owner
	DeviceOwner interface{}
	// The MAC address of the port.
	MacAddress interface{}
	// Port name.
	Name interface{}
	// The ID of network this port belongs to.
	NetworkId interface{}
	// Port unique id.
	PortId interface{}
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve port ids. If omitted, the
	// `region` argument of the provider is used.
	Region interface{}
	// The segmentation ID used for this port (i.e. for vlan type it is vlan tag)
	SegmentationId interface{}
	// The segmentation type used for this port (i.e. vlan)
	SegmentationType interface{}
}

// A collection of values returned by getPort.
type GetPortResult struct {
	// The administrative state of the port.
	AdminStateUp interface{}
	// The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
	AllFixedIps interface{}
	// An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	AllowedAddressPairs interface{}
	// See Argument Reference above.
	Description interface{}
	// See Argument Reference above.
	DeviceId interface{}
	// See Argument Reference above.
	DeviceOwner interface{}
	// List of the port IP address
	FixedIps interface{}
	// See Argument Reference above.
	MacAddress interface{}
	// Set to true if only admin can modify it. Normal user has only read access.
	ManagedByService interface{}
	// See Argument Reference above.
	Name interface{}
	// See Argument Reference above.
	NetworkId interface{}
	// See Argument Reference above.
	PortId interface{}
	// See Argument Reference above.
	Region interface{}
	// See Argument Reference above.
	SegmentationId interface{}
	// See Argument Reference above.
	SegmentationType interface{}
	// The status of the port.
	Status interface{}
	// Port tags.
	Tags interface{}
	// The owner name of port.
	TenantId interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
