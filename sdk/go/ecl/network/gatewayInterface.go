// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 gateway interface resource within Enterprise Cloud.
// 
// > **Notice** We only support Gateway interface with service_type "internet" for now.
type GatewayInterface struct {
	s *pulumi.ResourceState
}

// NewGatewayInterface registers a new resource with the given unique name, arguments, and options.
func NewGatewayInterface(ctx *pulumi.Context,
	name string, args *GatewayInterfaceArgs, opts ...pulumi.ResourceOpt) (*GatewayInterface, error) {
	if args == nil || args.GwVipv4 == nil {
		return nil, errors.New("missing required argument 'GwVipv4'")
	}
	if args == nil || args.Netmask == nil {
		return nil, errors.New("missing required argument 'Netmask'")
	}
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	if args == nil || args.PrimaryIpv4 == nil {
		return nil, errors.New("missing required argument 'PrimaryIpv4'")
	}
	if args == nil || args.SecondaryIpv4 == nil {
		return nil, errors.New("missing required argument 'SecondaryIpv4'")
	}
	if args == nil || args.ServiceType == nil {
		return nil, errors.New("missing required argument 'ServiceType'")
	}
	if args == nil || args.Vrid == nil {
		return nil, errors.New("missing required argument 'Vrid'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["awsGwId"] = nil
		inputs["azureGwId"] = nil
		inputs["description"] = nil
		inputs["gcpGwId"] = nil
		inputs["gwVipv4"] = nil
		inputs["gwVipv6"] = nil
		inputs["interdcGwId"] = nil
		inputs["internetGwId"] = nil
		inputs["name"] = nil
		inputs["netmask"] = nil
		inputs["networkId"] = nil
		inputs["primaryIpv4"] = nil
		inputs["primaryIpv6"] = nil
		inputs["region"] = nil
		inputs["secondaryIpv4"] = nil
		inputs["secondaryIpv6"] = nil
		inputs["serviceType"] = nil
		inputs["tenantId"] = nil
		inputs["vpnGwId"] = nil
		inputs["vrid"] = nil
	} else {
		inputs["awsGwId"] = args.AwsGwId
		inputs["azureGwId"] = args.AzureGwId
		inputs["description"] = args.Description
		inputs["gcpGwId"] = args.GcpGwId
		inputs["gwVipv4"] = args.GwVipv4
		inputs["gwVipv6"] = args.GwVipv6
		inputs["interdcGwId"] = args.InterdcGwId
		inputs["internetGwId"] = args.InternetGwId
		inputs["name"] = args.Name
		inputs["netmask"] = args.Netmask
		inputs["networkId"] = args.NetworkId
		inputs["primaryIpv4"] = args.PrimaryIpv4
		inputs["primaryIpv6"] = args.PrimaryIpv6
		inputs["region"] = args.Region
		inputs["secondaryIpv4"] = args.SecondaryIpv4
		inputs["secondaryIpv6"] = args.SecondaryIpv6
		inputs["serviceType"] = args.ServiceType
		inputs["tenantId"] = args.TenantId
		inputs["vpnGwId"] = args.VpnGwId
		inputs["vrid"] = args.Vrid
	}
	s, err := ctx.RegisterResource("ecl:network/gatewayInterface:GatewayInterface", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GatewayInterface{s: s}, nil
}

// GetGatewayInterface gets an existing GatewayInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayInterface(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GatewayInterfaceState, opts ...pulumi.ResourceOpt) (*GatewayInterface, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["awsGwId"] = state.AwsGwId
		inputs["azureGwId"] = state.AzureGwId
		inputs["description"] = state.Description
		inputs["gcpGwId"] = state.GcpGwId
		inputs["gwVipv4"] = state.GwVipv4
		inputs["gwVipv6"] = state.GwVipv6
		inputs["interdcGwId"] = state.InterdcGwId
		inputs["internetGwId"] = state.InternetGwId
		inputs["name"] = state.Name
		inputs["netmask"] = state.Netmask
		inputs["networkId"] = state.NetworkId
		inputs["primaryIpv4"] = state.PrimaryIpv4
		inputs["primaryIpv6"] = state.PrimaryIpv6
		inputs["region"] = state.Region
		inputs["secondaryIpv4"] = state.SecondaryIpv4
		inputs["secondaryIpv6"] = state.SecondaryIpv6
		inputs["serviceType"] = state.ServiceType
		inputs["tenantId"] = state.TenantId
		inputs["vpnGwId"] = state.VpnGwId
		inputs["vrid"] = state.Vrid
	}
	s, err := ctx.ReadResource("ecl:network/gatewayInterface:GatewayInterface", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GatewayInterface{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GatewayInterface) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GatewayInterface) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// AWS Gateway to which this port is connected.
// Conflicts with "azure_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
func (r *GatewayInterface) AwsGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["awsGwId"])
}

// Azure Gateway to which this port is connected.
// Conflicts with "aws_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
func (r *GatewayInterface) AzureGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["azureGwId"])
}

// Description of the Gateway Interface resource.
func (r *GatewayInterface) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// GCP Gateway to which this port is connected.
// Conflicts with "aws_gw_id", "azure_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
func (r *GatewayInterface) GcpGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gcpGwId"])
}

// IP version 4 address to be assigned virtual router on VRRP.
func (r *GatewayInterface) GwVipv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gwVipv4"])
}

// IP version 6 address to be assigned virtual router on VRRP.
func (r *GatewayInterface) GwVipv6() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gwVipv6"])
}

// Inter DC Gateway to which this port is connected.
// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "internet_gw_id" and "vpn_gw_id".
func (r *GatewayInterface) InterdcGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["interdcGwId"])
}

// Internet GW to which this port is connected.
// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "vpn_gw_id".
func (r *GatewayInterface) InternetGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["internetGwId"])
}

// Name of the Gateway Interface resource.
func (r *GatewayInterface) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Netmask for IPv4 addresses.
func (r *GatewayInterface) Netmask() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["netmask"])
}

// Network connected to this interface.
func (r *GatewayInterface) NetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkId"])
}

// IP version 4 address to be assigned to primary device on VRRP.
func (r *GatewayInterface) PrimaryIpv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryIpv4"])
}

// IP version 6 address to be assigned to primary device on VRRP.
func (r *GatewayInterface) PrimaryIpv6() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryIpv6"])
}

// The region in which to obtain the V2 Network client.
// Gateway interfaces are associated with accounts, but a Network client is needed to
// create one. If omitted, the `region` argument of the provider is used.
// Changing this creates a new gateway interface.
func (r *GatewayInterface) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// IP version 4 address to be assigned to secondary device on VRRP.
func (r *GatewayInterface) SecondaryIpv4() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryIpv4"])
}

// IP version 6 address to be assigned to secondary device on VRRP.
func (r *GatewayInterface) SecondaryIpv6() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryIpv6"])
}

// Service type for this interface.
// Must be one of "aws", "azure", "gcp", "interdc", "internet" and "vpn".
func (r *GatewayInterface) ServiceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceType"])
}

// Tenant ID of the owner (UUID).
func (r *GatewayInterface) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// VPN Gateway to which this port is connected.
// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "internet_gw_id".
func (r *GatewayInterface) VpnGwId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vpnGwId"])
}

// VRRP Group ID for this GW Interface.
func (r *GatewayInterface) Vrid() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vrid"])
}

// Input properties used for looking up and filtering GatewayInterface resources.
type GatewayInterfaceState struct {
	// AWS Gateway to which this port is connected.
	// Conflicts with "azure_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	AwsGwId interface{}
	// Azure Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	AzureGwId interface{}
	// Description of the Gateway Interface resource.
	Description interface{}
	// GCP Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	GcpGwId interface{}
	// IP version 4 address to be assigned virtual router on VRRP.
	GwVipv4 interface{}
	// IP version 6 address to be assigned virtual router on VRRP.
	GwVipv6 interface{}
	// Inter DC Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "internet_gw_id" and "vpn_gw_id".
	InterdcGwId interface{}
	// Internet GW to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "vpn_gw_id".
	InternetGwId interface{}
	// Name of the Gateway Interface resource.
	Name interface{}
	// Netmask for IPv4 addresses.
	Netmask interface{}
	// Network connected to this interface.
	NetworkId interface{}
	// IP version 4 address to be assigned to primary device on VRRP.
	PrimaryIpv4 interface{}
	// IP version 6 address to be assigned to primary device on VRRP.
	PrimaryIpv6 interface{}
	// The region in which to obtain the V2 Network client.
	// Gateway interfaces are associated with accounts, but a Network client is needed to
	// create one. If omitted, the `region` argument of the provider is used.
	// Changing this creates a new gateway interface.
	Region interface{}
	// IP version 4 address to be assigned to secondary device on VRRP.
	SecondaryIpv4 interface{}
	// IP version 6 address to be assigned to secondary device on VRRP.
	SecondaryIpv6 interface{}
	// Service type for this interface.
	// Must be one of "aws", "azure", "gcp", "interdc", "internet" and "vpn".
	ServiceType interface{}
	// Tenant ID of the owner (UUID).
	TenantId interface{}
	// VPN Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "internet_gw_id".
	VpnGwId interface{}
	// VRRP Group ID for this GW Interface.
	Vrid interface{}
}

// The set of arguments for constructing a GatewayInterface resource.
type GatewayInterfaceArgs struct {
	// AWS Gateway to which this port is connected.
	// Conflicts with "azure_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	AwsGwId interface{}
	// Azure Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "gcp_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	AzureGwId interface{}
	// Description of the Gateway Interface resource.
	Description interface{}
	// GCP Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "interdc_gw_id", "internet_gw_id" and "vpn_gw_id".
	GcpGwId interface{}
	// IP version 4 address to be assigned virtual router on VRRP.
	GwVipv4 interface{}
	// IP version 6 address to be assigned virtual router on VRRP.
	GwVipv6 interface{}
	// Inter DC Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "internet_gw_id" and "vpn_gw_id".
	InterdcGwId interface{}
	// Internet GW to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "vpn_gw_id".
	InternetGwId interface{}
	// Name of the Gateway Interface resource.
	Name interface{}
	// Netmask for IPv4 addresses.
	Netmask interface{}
	// Network connected to this interface.
	NetworkId interface{}
	// IP version 4 address to be assigned to primary device on VRRP.
	PrimaryIpv4 interface{}
	// IP version 6 address to be assigned to primary device on VRRP.
	PrimaryIpv6 interface{}
	// The region in which to obtain the V2 Network client.
	// Gateway interfaces are associated with accounts, but a Network client is needed to
	// create one. If omitted, the `region` argument of the provider is used.
	// Changing this creates a new gateway interface.
	Region interface{}
	// IP version 4 address to be assigned to secondary device on VRRP.
	SecondaryIpv4 interface{}
	// IP version 6 address to be assigned to secondary device on VRRP.
	SecondaryIpv6 interface{}
	// Service type for this interface.
	// Must be one of "aws", "azure", "gcp", "interdc", "internet" and "vpn".
	ServiceType interface{}
	// Tenant ID of the owner (UUID).
	TenantId interface{}
	// VPN Gateway to which this port is connected.
	// Conflicts with "aws_gw_id", "azure_gw_id", "gcp_gw_id", "interdc_gw_id" and "internet_gw_id".
	VpnGwId interface{}
	// VRRP Group ID for this GW Interface.
	Vrid interface{}
}
