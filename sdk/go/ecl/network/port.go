// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Port struct {
	s *pulumi.ResourceState
}

// NewPort registers a new resource with the given unique name, arguments, and options.
func NewPort(ctx *pulumi.Context,
	name string, args *PortArgs, opts ...pulumi.ResourceOpt) (*Port, error) {
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["allowedAddressPairs"] = nil
		inputs["description"] = nil
		inputs["deviceId"] = nil
		inputs["deviceOwner"] = nil
		inputs["fixedIps"] = nil
		inputs["macAddress"] = nil
		inputs["name"] = nil
		inputs["networkId"] = nil
		inputs["noFixedIp"] = nil
		inputs["region"] = nil
		inputs["segmentationId"] = nil
		inputs["segmentationType"] = nil
		inputs["status"] = nil
		inputs["tags"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["allowedAddressPairs"] = args.AllowedAddressPairs
		inputs["description"] = args.Description
		inputs["deviceId"] = args.DeviceId
		inputs["deviceOwner"] = args.DeviceOwner
		inputs["fixedIps"] = args.FixedIps
		inputs["macAddress"] = args.MacAddress
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["noFixedIp"] = args.NoFixedIp
		inputs["region"] = args.Region
		inputs["segmentationId"] = args.SegmentationId
		inputs["segmentationType"] = args.SegmentationType
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	inputs["allFixedIps"] = nil
	s, err := ctx.RegisterResource("ecl:network/port:Port", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Port{s: s}, nil
}

// GetPort gets an existing Port resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPort(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PortState, opts ...pulumi.ResourceOpt) (*Port, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["allFixedIps"] = state.AllFixedIps
		inputs["allowedAddressPairs"] = state.AllowedAddressPairs
		inputs["description"] = state.Description
		inputs["deviceId"] = state.DeviceId
		inputs["deviceOwner"] = state.DeviceOwner
		inputs["fixedIps"] = state.FixedIps
		inputs["macAddress"] = state.MacAddress
		inputs["name"] = state.Name
		inputs["networkId"] = state.NetworkId
		inputs["noFixedIp"] = state.NoFixedIp
		inputs["region"] = state.Region
		inputs["segmentationId"] = state.SegmentationId
		inputs["segmentationType"] = state.SegmentationType
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("ecl:network/port:Port", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Port{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Port) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Port) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Port) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

func (r *Port) AllFixedIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allFixedIps"])
}

func (r *Port) AllowedAddressPairs() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allowedAddressPairs"])
}

func (r *Port) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *Port) DeviceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceId"])
}

func (r *Port) DeviceOwner() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceOwner"])
}

func (r *Port) FixedIps() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["fixedIps"])
}

func (r *Port) MacAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["macAddress"])
}

func (r *Port) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Port) NetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkId"])
}

func (r *Port) NoFixedIp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["noFixedIp"])
}

func (r *Port) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *Port) SegmentationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["segmentationId"])
}

func (r *Port) SegmentationType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["segmentationType"])
}

func (r *Port) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

func (r *Port) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

func (r *Port) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering Port resources.
type PortState struct {
	AdminStateUp interface{}
	AllFixedIps interface{}
	AllowedAddressPairs interface{}
	Description interface{}
	DeviceId interface{}
	DeviceOwner interface{}
	FixedIps interface{}
	MacAddress interface{}
	Name interface{}
	NetworkId interface{}
	NoFixedIp interface{}
	Region interface{}
	SegmentationId interface{}
	SegmentationType interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
}

// The set of arguments for constructing a Port resource.
type PortArgs struct {
	AdminStateUp interface{}
	AllowedAddressPairs interface{}
	Description interface{}
	DeviceId interface{}
	DeviceOwner interface{}
	FixedIps interface{}
	MacAddress interface{}
	Name interface{}
	NetworkId interface{}
	NoFixedIp interface{}
	Region interface{}
	SegmentationId interface{}
	SegmentationType interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
}
